/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.panal;

import java.io.IOException;
import modal.DB;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modal.HomeInfo;
import modal.LogCenter;
import modal.Reporting;
import modal.beans.Admin;
import modal.beans.Home;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;

/**
 *
 * @author naras
 */
public class StudentAttendance extends javax.swing.JPanel {

    private static HashMap<String, String> gradeMap = new HashMap<>();
    private static HashMap<String, String> classMap = new HashMap<>();
    private static HashMap<String, String> CoursegradeMap = new HashMap<>();
    private static HashMap<String, String> CourseeMap = new HashMap<>();

    private Admin admin;

    public StudentAttendance(Admin bean) {
        initComponents();

        this.admin = bean;

        pageStart();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        student_attn_main_panel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        student_attn_class_panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox_classLoad = new javax.swing.JComboBox<>();
        jComboBox_gradeLoard = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Studen_ID_TextField = new javax.swing.JTextField();
        Student_Name_TextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        classAttnMarkButton = new javax.swing.JButton();
        class_attn_print_button = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        Class_Attn_Table = new javax.swing.JTable();
        class_From_DateChooser = new com.toedter.calendar.JDateChooser();
        class_to_DateChooser = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        class_attn_record_find_button = new javax.swing.JButton();
        class_CheckBox = new javax.swing.JCheckBox();
        jSeparator7 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        student_attn_course_panel = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        CourseSTName = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        CourseSTID = new javax.swing.JTextField();
        CourseReportPrint = new javax.swing.JButton();
        CourseFieldClear = new javax.swing.JButton();
        CourseAttnMark = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();
        CourseFromDate = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        CourseToDate = new com.toedter.calendar.JDateChooser();
        CourseRecordFind = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        CourseTabel = new javax.swing.JTable();
        CourseRecordCheckBox = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        CourseSubject = new javax.swing.JComboBox<>();
        CourseGrade = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        CourseClearAll = new javax.swing.JButton();
        employee_attn_main_panel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        employee_ID_Field = new javax.swing.JTextField();
        employee_Name_Field = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        employee_OnTime_Field = new javax.swing.JFormattedTextField();
        employee_OffTime_Field = new javax.swing.JFormattedTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        fromDateChooser = new com.toedter.calendar.JDateChooser();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        searchRecorButton = new javax.swing.JButton();
        ifrecordCheckBox = new javax.swing.JCheckBox();
        markAttn = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        updateAttn = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        employee_attn_table = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();

        setBackground(new java.awt.Color(200, 200, 198));
        setPreferredSize(new java.awt.Dimension(967, 668));

        jTabbedPane1.setBackground(new java.awt.Color(200, 200, 198));
        jTabbedPane1.setFont(new java.awt.Font("Poppins SemiBold", 1, 18)); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(967, 668));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        student_attn_main_panel.setBackground(new java.awt.Color(200, 200, 198));
        student_attn_main_panel.setPreferredSize(new java.awt.Dimension(967, 660));

        jTabbedPane2.setBackground(new java.awt.Color(200, 200, 198));
        jTabbedPane2.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });

        student_attn_class_panel.setBackground(new java.awt.Color(200, 200, 198));

        jLabel2.setFont(new java.awt.Font("SchulbuchNord", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(" Student Attendance Marking");

        jPanel6.setBackground(new java.awt.Color(200, 200, 198));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel3.setText("Select Class :");

        jComboBox_classLoad.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        jComboBox_classLoad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jComboBox_gradeLoard.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        jComboBox_gradeLoard.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_gradeLoardItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel4.setText("Select Grade :");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(6, 6, 6)
                        .addComponent(jComboBox_gradeLoard, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jComboBox_classLoad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)))
                .addGap(1, 1, 1))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addComponent(jComboBox_gradeLoard, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_classLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel5.setText("Student ID :");

        jLabel13.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel13.setText("Name :");

        Studen_ID_TextField.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        Studen_ID_TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Studen_ID_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Studen_ID_TextFieldKeyReleased(evt);
            }
        });

        Student_Name_TextField.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        Student_Name_TextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton1.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 153, 51));
        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        classAttnMarkButton.setBackground(new java.awt.Color(0, 153, 51));
        classAttnMarkButton.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        classAttnMarkButton.setForeground(new java.awt.Color(255, 255, 255));
        classAttnMarkButton.setText("Mark Attendance");
        classAttnMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classAttnMarkButtonActionPerformed(evt);
            }
        });

        class_attn_print_button.setBackground(new java.awt.Color(255, 204, 0));
        class_attn_print_button.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        class_attn_print_button.setText("Print Report");
        class_attn_print_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                class_attn_print_buttonActionPerformed(evt);
            }
        });

        Class_Attn_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Marking Date and Time", "class Schedule ID", "Student ID", "Employee ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Class_Attn_Table);

        jLabel14.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        jLabel14.setText("From :");

        jLabel15.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        jLabel15.setText("TO");

        class_attn_record_find_button.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        class_attn_record_find_button.setText("Find Dates");
        class_attn_record_find_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                class_attn_record_find_buttonActionPerformed(evt);
            }
        });

        class_CheckBox.setText("if You Want Search past attendance record ");
        class_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                class_CheckBoxActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 0, 0));
        jButton4.setText("Clear All Fields");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout student_attn_class_panelLayout = new javax.swing.GroupLayout(student_attn_class_panel);
        student_attn_class_panel.setLayout(student_attn_class_panelLayout);
        student_attn_class_panelLayout.setHorizontalGroup(
            student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jScrollPane1)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, student_attn_class_panelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(class_CheckBox))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, student_attn_class_panelLayout.createSequentialGroup()
                                .addComponent(class_attn_print_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(Student_Name_TextField)
                            .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(classAttnMarkButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addComponent(Studen_ID_TextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, student_attn_class_panelLayout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(class_From_DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(class_to_DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(class_attn_record_find_button, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39))
                            .addComponent(jSeparator6, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE))))
                .addContainerGap())
        );
        student_attn_class_panelLayout.setVerticalGroup(
            student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                        .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(6, 6, 6)
                        .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                                .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Studen_ID_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Student_Name_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)
                                .addComponent(classAttnMarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(student_attn_class_panelLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(class_attn_print_button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(class_CheckBox)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(student_attn_class_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(class_From_DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(class_to_DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(class_attn_record_find_button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Classes ", student_attn_class_panel);

        student_attn_course_panel.setBackground(new java.awt.Color(200, 200, 198));

        jLabel24.setFont(new java.awt.Font("SchulbuchNord", 1, 24)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText(" Student Attendance Marking");

        CourseSTName.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        CourseSTName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel23.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel23.setText("Name :");

        jLabel25.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel25.setText("Student ID :");

        CourseSTID.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        CourseSTID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        CourseSTID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                CourseSTIDKeyReleased(evt);
            }
        });

        CourseReportPrint.setBackground(new java.awt.Color(255, 204, 0));
        CourseReportPrint.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        CourseReportPrint.setText("Print Report");
        CourseReportPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseReportPrintActionPerformed(evt);
            }
        });

        CourseFieldClear.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        CourseFieldClear.setForeground(new java.awt.Color(0, 153, 51));
        CourseFieldClear.setText("Clear");
        CourseFieldClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseFieldClearActionPerformed(evt);
            }
        });

        CourseAttnMark.setBackground(new java.awt.Color(0, 153, 51));
        CourseAttnMark.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        CourseAttnMark.setForeground(new java.awt.Color(255, 255, 255));
        CourseAttnMark.setText("Mark Attendance");
        CourseAttnMark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseAttnMarkActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        jLabel16.setText("From :");

        jLabel19.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        jLabel19.setText("TO");

        CourseRecordFind.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        CourseRecordFind.setText("Find Dates");
        CourseRecordFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseRecordFindActionPerformed(evt);
            }
        });

        CourseTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Marked Date and Time", "Course Schedule ID", "Student ID", "Employee ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(CourseTabel);

        CourseRecordCheckBox.setText("if You Want Search past attendance record ");
        CourseRecordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseRecordCheckBoxActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(200, 200, 198));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel17.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel17.setText("Select Course :");

        CourseSubject.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        CourseSubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        CourseGrade.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        CourseGrade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CourseGradeItemStateChanged(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel20.setText("Select Grade :");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CourseGrade, 0, 230, Short.MAX_VALUE)
                .addGap(1, 1, 1))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(CourseSubject, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(13, 13, 13))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(CourseGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CourseSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        CourseClearAll.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        CourseClearAll.setForeground(new java.awt.Color(255, 0, 0));
        CourseClearAll.setText("Clear All Fields");
        CourseClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseClearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout student_attn_course_panelLayout = new javax.swing.GroupLayout(student_attn_course_panel);
        student_attn_course_panel.setLayout(student_attn_course_panelLayout);
        student_attn_course_panelLayout.setHorizontalGroup(
            student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CourseSTName)
                                    .addComponent(jLabel23)
                                    .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                                        .addComponent(CourseReportPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(CourseFieldClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                                .addComponent(CourseRecordCheckBox)))
                        .addGap(18, 18, 18)
                        .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(CourseAttnMark, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(CourseSTID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CourseClearAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, student_attn_course_panelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CourseFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CourseToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CourseRecordFind, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        student_attn_course_panelLayout.setVerticalGroup(
            student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                        .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CourseSTName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CourseSTID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CourseReportPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CourseFieldClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CourseAttnMark, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CourseClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CourseRecordCheckBox))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CourseFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(student_attn_course_panelLayout.createSequentialGroup()
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(student_attn_course_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CourseRecordFind, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CourseToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Courses ", student_attn_course_panel);

        javax.swing.GroupLayout student_attn_main_panelLayout = new javax.swing.GroupLayout(student_attn_main_panel);
        student_attn_main_panel.setLayout(student_attn_main_panelLayout);
        student_attn_main_panelLayout.setHorizontalGroup(
            student_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        student_attn_main_panelLayout.setVerticalGroup(
            student_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jTabbedPane1.addTab("Student Attendance", student_attn_main_panel);

        employee_attn_main_panel.setBackground(new java.awt.Color(200, 200, 198));

        jLabel6.setFont(new java.awt.Font("SchulbuchNord", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Employee Attendance Marking");

        jLabel7.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel7.setText("Employee ID :");

        jLabel8.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel8.setText("Name :");

        employee_ID_Field.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        employee_ID_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        employee_ID_Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                employee_ID_FieldKeyReleased(evt);
            }
        });

        employee_Name_Field.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        employee_Name_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel9.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel9.setText("On Time :");

        jLabel10.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel10.setText("Off Time :");

        employee_OnTime_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        employee_OnTime_Field.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N

        employee_OffTime_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        employee_OffTime_Field.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N

        jPanel4.setBackground(new java.awt.Color(200, 200, 198));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel11.setText("From :");

        jLabel12.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel12.setText("To :");

        fromDateChooser.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N

        toDateChooser.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N

        searchRecorButton.setBackground(new java.awt.Color(204, 204, 255));
        searchRecorButton.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        searchRecorButton.setText("Search");
        searchRecorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRecorButtonActionPerformed(evt);
            }
        });

        ifrecordCheckBox.setText("If You Want Search past attendance record ");
        ifrecordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifrecordCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(ifrecordCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(44, 44, 44))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchRecorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ifrecordCheckBox)
                        .addGap(8, 8, 8)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(searchRecorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        markAttn.setBackground(new java.awt.Color(0, 153, 102));
        markAttn.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        markAttn.setForeground(new java.awt.Color(255, 255, 255));
        markAttn.setText("Mark Attendance");
        markAttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAttnActionPerformed(evt);
            }
        });

        updateAttn.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        updateAttn.setForeground(new java.awt.Color(0, 153, 102));
        updateAttn.setText("Update Attendance");
        updateAttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAttnActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 204, 0));
        jButton6.setFont(new java.awt.Font("Poppins SemiBold", 1, 14)); // NOI18N
        jButton6.setText("Print Report");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        employee_attn_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Employee ID", "Employee Name", "On Time", "Off Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(employee_attn_table);

        jButton7.setFont(new java.awt.Font("Poppins Medium", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 0, 0));
        jButton7.setText("Clear");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout employee_attn_main_panelLayout = new javax.swing.GroupLayout(employee_attn_main_panel);
        employee_attn_main_panel.setLayout(employee_attn_main_panelLayout);
        employee_attn_main_panelLayout.setHorizontalGroup(
            employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3)
                    .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                        .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                                .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(employee_ID_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                                        .addGap(73, 73, 73))
                                    .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(employee_Name_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                        .addGap(49, 49, 49)))
                                .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(employee_OnTime_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                    .addComponent(employee_OffTime_Field))
                                .addGap(14, 14, 14))
                            .addComponent(jSeparator4)
                            .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                                .addComponent(markAttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateAttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        employee_attn_main_panelLayout.setVerticalGroup(
            employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                        .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(employee_ID_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(employee_OnTime_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(employee_Name_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(employee_OffTime_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(employee_attn_main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(markAttn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateAttn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(employee_attn_main_panelLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)))
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Employee Attendance", employee_attn_main_panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        try {
            EmployeeReport();
        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "EmployeeReportButton", e);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    // Update employee Attendance
    private void updateAttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAttnActionPerformed
        updateAttendance();
    }//GEN-LAST:event_updateAttnActionPerformed

    // Mark employee Attendance
    private void markAttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markAttnActionPerformed
        markAttendance();
    }//GEN-LAST:event_markAttnActionPerformed

    private void ifrecordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifrecordCheckBoxActionPerformed
        ifcheckrecord();
    }//GEN-LAST:event_ifrecordCheckBoxActionPerformed

    private void searchRecorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRecorButtonActionPerformed
        searchEmployeeRecord();
    }//GEN-LAST:event_searchRecorButtonActionPerformed

    // Search Employee Details
    private void employee_ID_FieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employee_ID_FieldKeyReleased
        searchEmployee();
    }//GEN-LAST:event_employee_ID_FieldKeyReleased

    private void jComboBox_gradeLoardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_gradeLoardItemStateChanged

        loadClass();
    }//GEN-LAST:event_jComboBox_gradeLoardItemStateChanged

    private void Studen_ID_TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Studen_ID_TextFieldKeyReleased
        searchClassEnrolment();
    }//GEN-LAST:event_Studen_ID_TextFieldKeyReleased

    private void class_attn_print_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_class_attn_print_buttonActionPerformed
        try {
            ClassReport();
        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "ClassReportButton", e);
        }
    }//GEN-LAST:event_class_attn_print_buttonActionPerformed

    private void classAttnMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classAttnMarkButtonActionPerformed
        MarkClassAttn();
    }//GEN-LAST:event_classAttnMarkButtonActionPerformed

    private void class_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_class_CheckBoxActionPerformed
        searchClassAttnChecBox();
    }//GEN-LAST:event_class_CheckBoxActionPerformed

    private void class_attn_record_find_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_class_attn_record_find_buttonActionPerformed
        searchClassAttn();
    }//GEN-LAST:event_class_attn_record_find_buttonActionPerformed

    private void CourseGradeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CourseGradeItemStateChanged
        loadCourse();
    }//GEN-LAST:event_CourseGradeItemStateChanged

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        SelectTab2();
    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void CourseSTIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CourseSTIDKeyReleased
        searchCourseEnrolment();
    }//GEN-LAST:event_CourseSTIDKeyReleased

    private void CourseAttnMarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseAttnMarkActionPerformed
        MarkCourseAttn();
    }//GEN-LAST:event_CourseAttnMarkActionPerformed

    private void CourseRecordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseRecordCheckBoxActionPerformed
        searchCourseAttnChecBox();
    }//GEN-LAST:event_CourseRecordCheckBoxActionPerformed

    private void CourseRecordFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseRecordFindActionPerformed
        searchCourseAttn();
    }//GEN-LAST:event_CourseRecordFindActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        resetEmployeePage();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        clearClassAllFieldMarkin();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearClassFieldMarkin();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CourseFieldClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseFieldClearActionPerformed
        clearCourseField();
    }//GEN-LAST:event_CourseFieldClearActionPerformed

    private void CourseClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseClearAllActionPerformed
        clearCourseAllField();
    }//GEN-LAST:event_CourseClearAllActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        SelectTab1();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void CourseReportPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseReportPrintActionPerformed
        try {
            CourseReport();
        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "CourseReport Button", e);
        }
    }//GEN-LAST:event_CourseReportPrintActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Class_Attn_Table;
    private javax.swing.JButton CourseAttnMark;
    private javax.swing.JButton CourseClearAll;
    private javax.swing.JButton CourseFieldClear;
    private com.toedter.calendar.JDateChooser CourseFromDate;
    private javax.swing.JComboBox<String> CourseGrade;
    private javax.swing.JCheckBox CourseRecordCheckBox;
    private javax.swing.JButton CourseRecordFind;
    private javax.swing.JButton CourseReportPrint;
    private javax.swing.JTextField CourseSTID;
    private javax.swing.JTextField CourseSTName;
    private javax.swing.JComboBox<String> CourseSubject;
    private javax.swing.JTable CourseTabel;
    private com.toedter.calendar.JDateChooser CourseToDate;
    private javax.swing.JTextField Studen_ID_TextField;
    private javax.swing.JTextField Student_Name_TextField;
    private javax.swing.JButton classAttnMarkButton;
    private javax.swing.JCheckBox class_CheckBox;
    private com.toedter.calendar.JDateChooser class_From_DateChooser;
    private javax.swing.JButton class_attn_print_button;
    private javax.swing.JButton class_attn_record_find_button;
    private com.toedter.calendar.JDateChooser class_to_DateChooser;
    private javax.swing.JTextField employee_ID_Field;
    private javax.swing.JTextField employee_Name_Field;
    private javax.swing.JFormattedTextField employee_OffTime_Field;
    private javax.swing.JFormattedTextField employee_OnTime_Field;
    private javax.swing.JPanel employee_attn_main_panel;
    private javax.swing.JTable employee_attn_table;
    private com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JCheckBox ifrecordCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox_classLoad;
    private javax.swing.JComboBox<String> jComboBox_gradeLoard;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton markAttn;
    private javax.swing.JButton searchRecorButton;
    private javax.swing.JPanel student_attn_class_panel;
    private javax.swing.JPanel student_attn_course_panel;
    private javax.swing.JPanel student_attn_main_panel;
    private com.toedter.calendar.JDateChooser toDateChooser;
    private javax.swing.JButton updateAttn;
    // End of variables declaration//GEN-END:variables

    // page start 
    private void pageStart() {

        String userType = admin.getType();

        if (userType.equals("Attendance Marker")) {

            jTabbedPane1.setEnabledAt(1, false);
            class_attn_print_button.setEnabled(false);
            class_CheckBox.setEnabled(false);
            class_From_DateChooser.setEnabled(false);
            class_to_DateChooser.setEnabled(false);
            class_attn_record_find_button.setEnabled(false);

            CourseReportPrint.setEnabled(false);
            CourseRecordCheckBox.setEnabled(false);
            CourseFromDate.setEnabled(false);
            CourseToDate.setEnabled(false);
            CourseRecordFind.setEnabled(false);
        }

        employee_Name_Field.setEditable(false);
        employee_OnTime_Field.setEditable(false);
        employee_OffTime_Field.setEditable(false);
        searchRecorButton.setEnabled(false);
        fromDateChooser.setEnabled(false);
        toDateChooser.setEnabled(false);

        Student_Name_TextField.setEditable(false);
        CourseSTName.setEditable(false);
        

        loadClassAttnTable();
        searchClassAttnChecBox();

        loadEmpAttnTabel();

        loadClassGrade();
        loadClassAttnTable();

        loadCourseGrade();
        loadCourseAttnTable();
    }

    // <<..........................................Studen Class Attendance Marking.........................................>>
    private void loadClassGrade() {

        try {

            ResultSet resultSet = DB.search("SELECT * FROM `grade`");

            Vector<String> vector = new Vector<>();
            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("name"));

                gradeMap.put(resultSet.getString("name"), resultSet.getString("id"));
            }

            DefaultComboBoxModel defaultComboBoxModel = new DefaultComboBoxModel(vector);

            jComboBox_gradeLoard.setModel(defaultComboBoxModel);

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "loadClassGrade", e);
        }

    }

    private void loadClass() {

        try {

            String grade = String.valueOf(jComboBox_gradeLoard.getSelectedItem());

            String gradeId = gradeMap.get(grade);
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            String query = "SELECT DISTINCT `subject`.`id`,`name` FROM `class_schedule` "
                    + "INNER JOIN `class` ON `class_schedule`.`class_id` = `class`.`id` "
                    + "INNER JOIN `subject` ON `class`.`subject_id` = `subject`.`id` ";

            if (class_CheckBox.isSelected()) {
                query += "WHERE `class`.grade_id = '" + gradeId + "' ";
                classAttnMarkButton.setEnabled(false);
            } else {
                query += " WHERE class_schedule.class_date = '" + dateFormat + "' "
                        + "AND `class`.grade_id = '" + gradeId + "' ";

            }

            ResultSet resultSet = DB.search(query);

            Vector<String> vector = new Vector<>();
            vector.add("Select");

            while (resultSet.next()) {
                String subjectName = resultSet.getString("name");
                String subjectId = resultSet.getString("subject.id");

                vector.add(subjectName);
                classMap.put(subjectName, subjectId);
            }

            DefaultComboBoxModel<String> defaultComboBoxModel = new DefaultComboBoxModel<>(vector);
            jComboBox_classLoad.setModel(defaultComboBoxModel);

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "loadClass", e);
        }

    }

    private void searchClassEnrolment() {

        try {

            if (jTabbedPane2.getSelectedIndex() == 0) {
                String st_ID = Studen_ID_TextField.getText();
                String grade = String.valueOf(jComboBox_gradeLoard.getSelectedItem());
                String gradeId = gradeMap.get(grade);

                String subject = String.valueOf(jComboBox_classLoad.getSelectedItem());
                String SubjectID = classMap.get(subject);

                if (gradeId == null) {
                    JOptionPane.showMessageDialog(this, "Grade is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (SubjectID == null) {
                    JOptionPane.showMessageDialog(this, "Class is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    if (st_ID.length() >= 8) {

                        ResultSet resultSet = DB.search("SELECT * FROM `class_enrollment` "
                                + "INNER JOIN `class` ON `class_enrollment`.`class_id` = `class`.`id`"
                                + "INNER JOIN `student` ON  `class_enrollment`.`student_id` = `student`.`id`"
                                + "WHERE `class`.`grade_id`= '" + gradeId + "'"
                                + "AND `class`.`subject_id` = '" + SubjectID + "'"
                                + "AND `student_id` = '" + st_ID + "'");

                        if (resultSet.next()) {
                            Student_Name_TextField.setText(resultSet.getString("fname") + " " + resultSet.getString("lname"));
                            classAttnMarkButton.grabFocus();
                        } else {
                            Studen_ID_TextField.grabFocus();
                            JOptionPane.showMessageDialog(this, "Invalid Student ID or Not Registerd Student", "Warning", JOptionPane.WARNING_MESSAGE);

                        }

                    } else {
                        Student_Name_TextField.setText("");
                        Studen_ID_TextField.grabFocus();
                    }
                }

            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "searchClassEnrolment", e);
        }
    }

    private void MarkClassAttn() {

        try {
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            String grade = String.valueOf(jComboBox_gradeLoard.getSelectedItem());
            String gradeId = gradeMap.get(grade);

            String subject = String.valueOf(jComboBox_classLoad.getSelectedItem());
            String SubjectID = classMap.get(subject);

            ResultSet resultSet = DB.search("SELECT * FROM `class_schedule` "
                    + "INNER JOIN `class` ON `class_schedule`.`class_id` = `class`.`id` "
                    + "WHERE `class_schedule`.`class_date` = '" + dateFormat + "' "
                    + "AND `class`.`grade_id` = '" + gradeId + "' "
                    + "AND `class`.`subject_id` = '" + SubjectID + "'");

            if (resultSet.next()) {

                String scheduleID = resultSet.getString("id");
                String StudenID = Studen_ID_TextField.getText();

                ResultSet resultSet1 = DB.search("SELECT * FROM class_attendance "
                        + "WHERE class_schedule_id = '" + scheduleID + "' "
                        + "AND DATE(`marked_time`) = '" + dateFormat + "' "
                        + "AND student_id = '" + StudenID + "'");

                if (resultSet1.next()) {
                    Studen_ID_TextField.grabFocus();
                    JOptionPane.showMessageDialog(this, "This Student Attendance Alredy Marked", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date());
                    String employeeUserName = admin.getUserName();

                    ResultSet resultSet2 = DB.search("SELECT * FROM emp_access WHERE user_name = '" + employeeUserName + "'");

                    if (resultSet2.next()) {
                        String empID = resultSet2.getString("employee_id");
                        String StudenName = Student_Name_TextField.getText();

                        if (gradeId == null) {
                            JOptionPane.showMessageDialog(this, "Grade is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                        } else if (SubjectID == null) {
                            JOptionPane.showMessageDialog(this, "Class is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                        } else if (StudenName.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Please Enter Student ID", "Warning", JOptionPane.WARNING_MESSAGE);
                        } else {

                            boolean cnaMark = false;

                            ResultSet resultSet3 = DB.search("SELECT * FROM class_pay "
                                    + "INNER JOIN payment ON class_pay.payment_id = payment.id "
                                    + "WHERE class_pay.class_id = '" + resultSet.getString("class_id") + "' "
                                    + "AND MONTH(class_pay.due_month) = MONTH('" + dateFormat + "') "
                                    + "AND student_id = '" + StudenID + "';");

                            if (resultSet3.next()) {
                                cnaMark = true;
                            } else {
                                int option = JOptionPane.showConfirmDialog(this, "The student has not completed the class payment for this month. However, would you still like to mark his attendance?",
                                        "Message", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                                if (option == JOptionPane.YES_OPTION) {
                                    cnaMark = true;
                                } else {
                                    cnaMark = false;
                                    clearClassFieldMarkin();
                                }
                            }

                            if (cnaMark) {
                                DB.IUD("INSERT INTO class_attendance "
                                        + "(`marked_time`,`class_schedule_id`,`student_id`,`employee_id`) "
                                        + "VALUES('" + dateFormat + "','" + scheduleID + "','" + StudenID + "','" + empID + "')");
                            }
                            Studen_ID_TextField.grabFocus();
                            clearClassFieldMarkin();
                            loadClassAttnTable();
                        }

                    }

                }

            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "MarkClassAttn", e);
        }

    }

    private void searchClassAttn() {
        try {
            String ST_name = Student_Name_TextField.getText();
            String ST_ID = Studen_ID_TextField.getText();

            String grade = String.valueOf(jComboBox_gradeLoard.getSelectedItem());
            String gradeId = gradeMap.get(grade);

            String subject = String.valueOf(jComboBox_classLoad.getSelectedItem());
            String SubjectID = classMap.get(subject);

            if (gradeId == null) {
                JOptionPane.showMessageDialog(this, "Please Select Grade", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (SubjectID == null) {
                JOptionPane.showMessageDialog(this, "Please Select Class", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {

                ResultSet resultSet = DB.search("SELECT * FROM `class_schedule` "
                        + "INNER JOIN `class` ON `class_schedule`.`class_id` = `class`.`id` "
                        + "WHERE `class`.`grade_id` = '" + gradeId + "' "
                        + "AND `class`.`subject_id` = '" + SubjectID + "'");

                if (resultSet.next()) {

                    String scheduleID = resultSet.getString("id");

                    Date fromDate;
                    Date toDate;
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

                    String query = "SELECT * FROM `class_attendance` "
                            + " WHERE DATE(`marked_time`) BETWEEN ";

                    if (ST_name.isEmpty()) {
                        if (class_From_DateChooser.getDate() != null) {
                            fromDate = class_From_DateChooser.getDate();
                            query += "'" + format.format(fromDate) + "' AND ";
                        } else {
                            query += "'2024-01-01' AND ";
                        }

                        if (class_to_DateChooser.getDate() != null) {
                            toDate = class_to_DateChooser.getDate();
                            query += "'" + format.format(toDate) + "' ";
                        } else {
                            query += "'" + format.format(new Date()) + "' ";
                        }

                    } else {
                        if (class_From_DateChooser.getDate() != null) {
                            fromDate = class_From_DateChooser.getDate();
                            query += "'" + format.format(fromDate) + "' AND ";
                        } else {
                            query += "'2024-01-01' AND ";
                        }

                        if (class_to_DateChooser.getDate() != null) {
                            toDate = class_to_DateChooser.getDate();
                            query += "'" + format.format(toDate) + "' AND ";
                        } else {
                            query += "'" + format.format(new Date()) + "' AND ";
                        }

                        query += "`student_id` ='" + ST_ID + "'";
                    }

                    query += "AND `class_schedule_id` ='" + scheduleID + "' ORDER BY `marked_time` ASC";

                    ResultSet resultSet1 = DB.search(query);

                    DefaultTableModel tableModel = (DefaultTableModel) Class_Attn_Table.getModel();
                    tableModel.setRowCount(0);

                    while (resultSet1.next()) {
                        Vector<String> ClassVector = new Vector<>();
                        ClassVector.add(resultSet1.getString("marked_time"));
                        ClassVector.add(resultSet1.getString("class_schedule_id"));
                        ClassVector.add(resultSet1.getString("student_id"));
                        ClassVector.add(resultSet1.getString("employee_id"));

                        tableModel.addRow(ClassVector);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "This is Not Scheduled Class", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "searchClassAttn", e);
        }
    }

    private void searchClassAttnChecBox() {

        if (class_CheckBox.isSelected()) {
            class_From_DateChooser.setEnabled(true);
            class_to_DateChooser.setEnabled(true);
            class_attn_record_find_button.setEnabled(true);
            loadClassGrade();
        } else {

            classAttnMarkButton.setEnabled(true);
            class_From_DateChooser.setEnabled(false);
            class_to_DateChooser.setEnabled(false);
            class_attn_record_find_button.setEnabled(false);
            loadClassGrade();
        }
    }

    private void loadClassAttnTable() {

        try {
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            ResultSet resultSet = DB.search("SELECT * FROM class_attendance "
                    + "WHERE DATE(`marked_time`) = '" + dateFormat + "' "
                    + "ORDER BY `marked_time` ASC");

            DefaultTableModel tableModel = (DefaultTableModel) Class_Attn_Table.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                Vector<String> ClassVector = new Vector<>();
                ClassVector.add(resultSet.getString("marked_time"));
                ClassVector.add(resultSet.getString("class_schedule_id"));
                ClassVector.add(resultSet.getString("student_id"));
                ClassVector.add(resultSet.getString("employee_id"));

                tableModel.addRow(ClassVector);
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "loadClassAttnTable", e);
        }

    }

    private void ClassReport() {
        Home home;
        try {
            home = new HomeInfo().getHome();
            JRTableModelDataSource dataSource = new JRTableModelDataSource(Class_Attn_Table.getModel());
            HashMap<String, Object> params = new HashMap<>();
            params.put("landLine", home.getLandLine());
            params.put("email", home.getEmail());
            params.put("mobile", home.getMobile());
            params.put("address", home.getLine01() + " " + home.getLine02() + " " + home.getCity());
            params.put("title", "Class Attendance Report");

            new Reporting().viewReport("ClassAttn", params, dataSource, admin);

        } catch (IOException | ClassNotFoundException | JRException ex) {
            LogCenter.logger.log(java.util.logging.Level.WARNING, "Error", ex);
        }

    }

    private void clearClassFieldMarkin() {
        Studen_ID_TextField.setText("");
        Student_Name_TextField.setText("");
    }

    private void clearClassAllFieldMarkin() {
        clearClassFieldMarkin();
        jComboBox_gradeLoard.setSelectedIndex(0);
        jComboBox_classLoad.setSelectedIndex(0);

        class_From_DateChooser.setDate(null);
        class_to_DateChooser.setDate(null);

        class_CheckBox.setSelected(false);
        class_From_DateChooser.setEnabled(false);
        class_to_DateChooser.setEnabled(false);

        loadClassAttnTable();
    }

    // <<..........................................Studen Class Attendance Marking.........................................>>
// <<..........................................Studen Course Attendance Marking.........................................>>
    private void loadCourseGrade() {

        try {

            ResultSet resultSet = DB.search("SELECT * FROM `grade`");

            Vector<String> vector = new Vector<>();
            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("name"));

                CoursegradeMap.put(resultSet.getString("name"), resultSet.getString("id"));
            }

            DefaultComboBoxModel defaultComboBoxModel = new DefaultComboBoxModel(vector);

            CourseGrade.setModel(defaultComboBoxModel);

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "loadCourseGrade", e);
        }

    }

    private void loadCourse() {

        try {
            String grade = String.valueOf(CourseGrade.getSelectedItem());
            String gradeId = CoursegradeMap.get(grade);

            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            String query = "SELECT DISTINCT `subject`.`id`,`name` FROM `course_schedule` "
                    + "INNER JOIN `course` ON `course_schedule`.`course_id` = `course`.`id`"
                    + "INNER JOIN `subject` ON `course`.subject_id = `subject`.`id` ";

            if (CourseRecordCheckBox.isSelected()) {
                query += "WHERE `course`.`grade_id` = '" + gradeId + "' ";
                CourseAttnMark.setEnabled(false);
            } else {
                query += " WHERE `course_schedule`.`class_date` = '" + dateFormat + "' "
                        + "AND `course`.`grade_id` = '" + gradeId + "' ";

            }

            ResultSet resultSet = DB.search(query);

            Vector<String> vector = new Vector<>();
            vector.add("Select");

            while (resultSet.next()) {

                String subjectName = resultSet.getString("name");
                String subjectId = resultSet.getString("subject.id");

                vector.add(subjectName);
                CourseeMap.put(subjectName, subjectId);

            }
            DefaultComboBoxModel<String> defaultComboBoxModel = new DefaultComboBoxModel<>(vector);
            CourseSubject.setModel(defaultComboBoxModel);

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "loadCourse", e);
        }

    }

    private void searchCourseEnrolment() {

        try {

            if (jTabbedPane2.getSelectedIndex() == 1) {

                String st_ID = CourseSTID.getText();
                String grade = String.valueOf(CourseGrade.getSelectedItem());
                String gradeId = CoursegradeMap.get(grade);

                String subject = String.valueOf(CourseSubject.getSelectedItem());
                String SubjectID = CourseeMap.get(subject);

                if (gradeId == null) {
                    JOptionPane.showMessageDialog(this, "Grade is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (SubjectID == null) {
                    JOptionPane.showMessageDialog(this, "Class is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    if (st_ID.length() >= 8) {

                        ResultSet resultSet = DB.search("SELECT * FROM `course_enrollment`"
                                + "INNER JOIN `course` ON `course_enrollment`.`course_id` = `course`.id "
                                + "INNER JOIN `student` ON  `course_enrollment`.`student_id` = `student`.`id`"
                                + "WHERE `course`.`grade_id` = '" + gradeId + "' "
                                + "AND `course`.`subject_id` = '" + SubjectID + "' "
                                + "AND `student_id` = '" + st_ID + "'");

                        if (resultSet.next()) {
                            CourseSTName.setText(resultSet.getString("fname") + " " + resultSet.getString("lname"));
                            CourseAttnMark.grabFocus();
                        } else {
                            JOptionPane.showMessageDialog(this, "Invalid Student ID or Not Registerd Student", "Warning", JOptionPane.WARNING_MESSAGE);
                        }

                    } else {
                        CourseSTName.setText("");
                    }
                }
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "searchCourseEnrolment", e);
        }
    }

    private void MarkCourseAttn() {

        try {
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            String grade = String.valueOf(CourseGrade.getSelectedItem());
            String gradeId = CoursegradeMap.get(grade);

            String subject = String.valueOf(CourseSubject.getSelectedItem());
            String SubjectID = CourseeMap.get(subject);

            ResultSet resultSet = DB.search("SELECT * FROM `course_schedule` "
                    + "INNER JOIN `course` ON `course_schedule`.course_id = `course`.`id`"
                    + " WHERE `course_schedule`.`class_date` = '" + dateFormat + "' "
                    + "AND `course`.`grade_id` = '" + gradeId + "' "
                    + "AND `course`.`subject_id` = '" + SubjectID + "'");

            if (resultSet.next()) {

                String scheduleID = resultSet.getString("id");
                String StudenID = CourseSTID.getText();

                ResultSet resultSet1 = DB.search("SELECT * FROM course_attendance "
                        + "WHERE course_schedule_id = '" + scheduleID + "' "
                        + "AND DATE(`marked_time`) = '" + dateFormat + "' "
                        + "AND student_id = '" + StudenID + "'");

                if (resultSet1.next()) {
                    CourseSTID.grabFocus();
                    JOptionPane.showMessageDialog(this, "This Student Attendance Alredy Marked", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date());
                    String employeeUserName = admin.getUserName();

                    ResultSet resultSet2 = DB.search("SELECT * FROM emp_access WHERE user_name = '" + employeeUserName + "'");

                    if (resultSet2.next()) {
                        String empID = resultSet2.getString("employee_id");
                        String StudenName = CourseSTName.getText();

                        if (gradeId == null) {
                            JOptionPane.showMessageDialog(this, "Grade is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                        } else if (SubjectID == null) {
                            JOptionPane.showMessageDialog(this, "Class is not Selected", "Warning", JOptionPane.WARNING_MESSAGE);
                        } else if (StudenName.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Please Enter Student ID", "Warning", JOptionPane.WARNING_MESSAGE);
                        } else {

                            boolean cnaMark = false;

                            ResultSet resultSet3 = DB.search("SELECT SUM(`fee`) AS `fee` FROM `course_pay`"
                                    + "INNER JOIN `payment` ON `course_pay`.`payment_id` = `payment`.`id` "
                                    + "WHERE `course_pay`.`course_id` = '" + resultSet.getString("course_id") + "' "
                                    + "AND `payment`.`student_id` = '" + StudenID + "'");

                            if (resultSet3.next()) {

                                double CourseFee = Double.parseDouble(resultSet.getString("fee"));
                                double PaidAmmount = resultSet3.getDouble("fee");

                                double balance = CourseFee - PaidAmmount;

                                String message = "Total Payment: " + CourseFee + "\n"
                                        + "paid: " + PaidAmmount + "\n"
                                        + "Balance Payment: " + balance + "\n"
                                        + "Do you want to mark the attendance?";

                                int option = JOptionPane.showConfirmDialog(this, message, "Message", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                                if (option == JOptionPane.YES_OPTION) {
                                    cnaMark = true;
                                } else {
                                    cnaMark = false;
                                }
                            } else {
                                cnaMark = false;
                            }

                            if (cnaMark) {
                                DB.IUD("INSERT INTO course_attendance "
                                        + "(`marked_time`,`course_schedule_id`,`student_id`,`employee_id`) "
                                        + "VALUES('" + dateFormat + "','" + scheduleID + "','" + StudenID + "','" + empID + "')");
                            }
                            loadCourseAttnTable();
                            CourseSTID.grabFocus();
                            clearCourseField();
                        }

                    }

                }

            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "MarkCourseAttn", e);
        }

    }

    private void loadCourseAttnTable() {

        try {
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            ResultSet resultSet = DB.search("SELECT * FROM course_attendance "
                    + "WHERE DATE(`marked_time`) = '" + dateFormat + "' "
                    + "ORDER BY `marked_time` ASC");

            DefaultTableModel tableModel = (DefaultTableModel) CourseTabel.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                Vector<String> ClassVector = new Vector<>();
                ClassVector.add(resultSet.getString("marked_time"));
                ClassVector.add(resultSet.getString("course_schedule_id"));
                ClassVector.add(resultSet.getString("student_id"));
                ClassVector.add(resultSet.getString("employee_id"));

                tableModel.addRow(ClassVector);
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "loadCourseAttnTable", e);
        }

    }

    private void searchCourseAttnChecBox() {

        if (CourseRecordCheckBox.isSelected()) {
            CourseFromDate.setEnabled(true);
            CourseToDate.setEnabled(true);
            CourseRecordFind.setEnabled(true);
            loadCourseGrade();
        } else {

            CourseAttnMark.setEnabled(true);

            CourseFromDate.setEnabled(false);
            CourseToDate.setEnabled(false);
            CourseRecordFind.setEnabled(false);
            loadCourseGrade();
        }
    }

    private void searchCourseAttn() {
        try {
            String ST_name = CourseSTName.getText();
            String ST_ID = CourseSTID.getText();

            String grade = String.valueOf(CourseGrade.getSelectedItem());
            String gradeId = CoursegradeMap.get(grade);

            String subject = String.valueOf(CourseSubject.getSelectedItem());
            String SubjectID = CourseeMap.get(subject);

            if (gradeId == null) {
                JOptionPane.showMessageDialog(this, "Please Select Grade", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (SubjectID == null) {
                JOptionPane.showMessageDialog(this, "Please Select Class", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {

                ResultSet resultSet = DB.search("SELECT * FROM `course_schedule` "
                        + "INNER JOIN `course` ON `course_schedule`.`course_id` = `course`.`id` "
                        + "WHERE `course`.`grade_id` = '" + gradeId + "' "
                        + "AND `course`.`subject_id` = '" + SubjectID + "'");

                if (resultSet.next()) {

                    String scheduleID = resultSet.getString("id");

                    Date fromDate;
                    Date toDate;
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

                    String query = "SELECT * FROM `course_attendance` "
                            + " WHERE DATE(`marked_time`) BETWEEN ";

                    if (ST_name.isEmpty()) {
                        if (CourseFromDate.getDate() != null) {
                            fromDate = CourseFromDate.getDate();
                            query += "'" + format.format(fromDate) + "' AND ";
                        } else {
                            query += "'2024-01-01' AND ";
                        }

                        if (CourseToDate.getDate() != null) {
                            toDate = CourseToDate.getDate();
                            query += "'" + format.format(toDate) + "' ";
                        } else {
                            query += "'" + format.format(new Date()) + "' ";
                        }

                    } else {
                        if (CourseFromDate.getDate() != null) {
                            fromDate = CourseFromDate.getDate();
                            query += "'" + format.format(fromDate) + "' AND ";
                        } else {
                            query += "'2024-01-01' AND ";
                        }

                        if (CourseToDate.getDate() != null) {
                            toDate = CourseToDate.getDate();
                            query += "'" + format.format(toDate) + "' AND ";
                        } else {
                            query += "'" + format.format(new Date()) + "' AND ";
                        }

                        query += "`student_id` ='" + ST_ID + "'";
                    }

                    query += "AND `course_schedule_id` ='" + scheduleID + "' ORDER BY `marked_time` ASC";

                    ResultSet resultSet1 = DB.search(query);

                    DefaultTableModel tableModel = (DefaultTableModel) CourseTabel.getModel();
                    tableModel.setRowCount(0);

                    while (resultSet1.next()) {
                        Vector<String> ClassVector = new Vector<>();
                        ClassVector.add(resultSet1.getString("marked_time"));
                        ClassVector.add(resultSet1.getString("course_schedule_id"));
                        ClassVector.add(resultSet1.getString("student_id"));
                        ClassVector.add(resultSet1.getString("employee_id"));

                        tableModel.addRow(ClassVector);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "This is Not Scheduled Class", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "searchCourseAttn", e);
        }
    }

    private void CourseReport() throws JRException {
        Home home;
        try {
            home = new HomeInfo().getHome();
            JRTableModelDataSource dataSource = new JRTableModelDataSource(CourseTabel.getModel());
            HashMap<String, Object> params = new HashMap<>();
            params.put("landLine", home.getLandLine());
            params.put("email", home.getEmail());
            params.put("mobile", home.getMobile());
            params.put("address", home.getLine01() + " " + home.getLine02() + " " + home.getCity());
            params.put("title", "Course Attendance Report");

            new Reporting().viewReport("CourseAttn", params, dataSource, admin);

        } catch (IOException | ClassNotFoundException | JRException ex) {
            LogCenter.logger.log(java.util.logging.Level.WARNING, "Error", ex);
        }

    }

    private void clearCourseField() {
        CourseSTID.setText("");
        CourseSTName.setText("");
        CourseTabel.clearSelection();
    }

    private void clearCourseAllField() {
        clearCourseField();
        CourseGrade.setSelectedIndex(0);
        CourseSubject.setSelectedIndex(0);

        CourseFromDate.setDate(null);
        CourseToDate.setDate(null);
        CourseRecordCheckBox.setSelected(false);
        CourseFromDate.setEnabled(false);
        CourseToDate.setEnabled(false);

        loadCourseAttnTable();
    }

// <<..........................................Studen Course Attendance Marking.........................................>>
// <<..........................................Employee Attendance Marking.........................................>>
    // Search Employee Details
    private void searchEmployee() {

        try {

            String empID = employee_ID_Field.getText();

            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            if (empID.length() >= 9) {

                ResultSet resultSet = DB.search("SELECT * FROM `employee` WHERE `id`= '" + empID + "'");

                if (resultSet.next()) {

                    String fname = resultSet.getString("fname");
                    String lname = resultSet.getString("lname");

                    employee_Name_Field.setText(fname + " " + lname);

                    ResultSet resultSet1 = DB.search("SELECT * FROM `emp_attendance` "
                            + "WHERE `employee_id`= '" + empID + "' AND `date`='" + dateFormat + "'");

                    if (resultSet1.next()) {
                        String offtime = resultSet1.getString("offtime");

                        if ("00:00:00".equals(offtime)) {
                            updateAttn.setEnabled(true);
                            updateAttn.grabFocus();
                            markAttn.setEnabled(false);

                            employee_OnTime_Field.setText(String.valueOf(resultSet1.getString("ontime")));
                        } else {
                            employee_OnTime_Field.setText(String.valueOf(resultSet1.getString("ontime")));
                            employee_OffTime_Field.setText(String.valueOf(resultSet1.getString("offtime")));
                            updateAttn.setEnabled(false);
                            markAttn.setEnabled(false);
                        }

                    } else {
                        updateAttn.setEnabled(false);
                        markAttn.setEnabled(true);
                        markAttn.grabFocus();
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Invalid Employee ID or Not Registerd Employee", "Warning", JOptionPane.WARNING_MESSAGE);
                }

            } else {
                employee_Name_Field.setText("");
                employee_OnTime_Field.setText("");
                employee_OffTime_Field.setText("");
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "searchEmployee", e);
        }

    }

    // mark attendance
    private void markAttendance() {

        try {

            String empID = employee_ID_Field.getText();
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            String timeFormat = new SimpleDateFormat("HH:mm:ss").format(new Date());

            if (empID.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please Enter Employee ID", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {

                DB.IUD("INSERT INTO emp_attendance "
                        + "(`date`,`ontime`,`offtime`,`employee_id`) "
                        + "VALUES('" + dateFormat + "','" + timeFormat + "','00:00:00','" + empID + "')");

                loadEmpAttnTabel();
                resetEmployeePage();
                employee_ID_Field.grabFocus();

            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "markAttendance", e);
        }

    }

    // Update emloyee attendance 
    private void updateAttendance() {
        try {

            String empID = employee_ID_Field.getText();
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            String timeFormat = new SimpleDateFormat("HH:mm:ss").format(new Date());

            if (empID.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please Enter Employee ID", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {

                DB.IUD("UPDATE `emp_attendance` SET "
                        + "`offtime`='" + timeFormat + "' WHERE employee_id= '" + empID + "' AND `date`='" + dateFormat + "'");

                loadEmpAttnTabel();
                resetEmployeePage();
                employee_ID_Field.grabFocus();
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "updateAttendance", e);
        }
    }

    // Load Employee Attendance Table
    private void loadEmpAttnTabel() {

        try {
            String dateFormat = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            ResultSet resultSet = DB.search("SELECT * FROM `emp_attendance`"
                    + " INNER JOIN `employee` ON `emp_attendance`.`employee_id` = `employee`.`id`"
                    + " WHERE `date`= '" + dateFormat + "' ORDER BY `emp_attendance`.`ontime` ASC");

            DefaultTableModel tableModel = (DefaultTableModel) employee_attn_table.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("date"));
                vector.add(resultSet.getString("employee_id"));
                vector.add(resultSet.getString("fname") + " " + resultSet.getString("lname"));
                vector.add(resultSet.getString("ontime"));
                vector.add(resultSet.getString("offtime"));

                tableModel.addRow(vector);
            }

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "loadEmpAttnTabel", e);
        }

    }

    // Search past attendance record if required (check box)
    private void ifcheckrecord() {

        if (ifrecordCheckBox.isSelected()) {
            searchRecorButton.setEnabled(true);
            fromDateChooser.setEnabled(true);
            toDateChooser.setEnabled(true);
        } else {
            searchRecorButton.setEnabled(false);
            fromDateChooser.setEnabled(false);
            toDateChooser.setEnabled(false);
        }

    }

    // Search Attendance Record
    private void searchEmployeeRecord() {

        try {
            String emp_name = employee_Name_Field.getText();
            String emp_id = employee_ID_Field.getText();

            String query = "SELECT * FROM `emp_attendance` "
                    + "INNER JOIN `employee` ON `emp_attendance`.`employee_id` = `employee`.`id` "
                    + "WHERE `emp_attendance`.`date` BETWEEN ";

            Date fromDate;
            Date toDate;
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

            if (emp_name.isEmpty()) {
                if (fromDateChooser.getDate() != null) {
                    fromDate = fromDateChooser.getDate();
                    query += "'" + format.format(fromDate) + "' AND ";
                } else {
                    query += "'2024-01-01' AND ";
                }

                if (toDateChooser.getDate() != null) {
                    toDate = toDateChooser.getDate();
                    query += "'" + format.format(toDate) + "' ";
                } else {
                    query += "'" + format.format(new Date()) + "' ";
                }

            } else {
                if (fromDateChooser.getDate() != null) {
                    fromDate = fromDateChooser.getDate();
                    query += "'" + format.format(fromDate) + "' AND ";
                } else {
                    query += "'2024-01-01' AND ";
                }

                if (toDateChooser.getDate() != null) {
                    toDate = toDateChooser.getDate();
                    query += "'" + format.format(toDate) + "' AND ";
                } else {
                    query += "'" + format.format(new Date()) + "' AND ";
                }

                query += "`emp_attendance`.`employee_id` = '" + emp_id + "' ";
            }

            query += "ORDER BY `emp_attendance`.`date` ASC, `emp_attendance`.`employee_id` ASC";

            ResultSet resultSet = DB.search(query);

            DefaultTableModel defaultTableModel = (DefaultTableModel) employee_attn_table.getModel();
            defaultTableModel.setRowCount(0);

            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("date"));
                vector.add(resultSet.getString("employee_id"));
                vector.add(resultSet.getString("employee.fname") + " " + resultSet.getString("employee.lname"));
                vector.add(resultSet.getString("ontime"));
                vector.add(resultSet.getString("offtime"));

                defaultTableModel.addRow(vector);
            }

            resetEmployeePage();

        } catch (Exception e) {
            LogCenter.logger.log(Level.WARNING, "searchEmployeeRecord", e);
        }

    }

    // Reset Employee page  
    private void resetEmployeePage() {

        employee_ID_Field.setText("");
        employee_Name_Field.setText("");
        employee_OnTime_Field.setText("");
        employee_OffTime_Field.setText("");

        markAttn.setEnabled(true);
        updateAttn.setEnabled(true);

        fromDateChooser.setDate(null);
        toDateChooser.setDate(null);

        fromDateChooser.setEnabled(true);
        toDateChooser.setEnabled(true);
        ifrecordCheckBox.setSelected(false);

        employee_attn_table.clearSelection();

        loadEmpAttnTabel();

    }

    private void EmployeeReport() throws JRException {
        Home home;
        try {
            home = new HomeInfo().getHome();
            JRTableModelDataSource dataSource = new JRTableModelDataSource(employee_attn_table.getModel());
            HashMap<String, Object> params = new HashMap<>();
            params.put("landLine", home.getLandLine());
            params.put("email", home.getEmail());
            params.put("mobile", home.getMobile());
            params.put("address", home.getLine01() + " " + home.getLine02() + " " + home.getCity());
            params.put("title", "Employee Attendance Report");

            new Reporting().viewReport("Employee_Attn", params, dataSource, admin);

        } catch (IOException | ClassNotFoundException | JRException ex) {
            LogCenter.logger.log(java.util.logging.Level.WARNING, "Error", ex);
        }

    }

    private void SelectTab1() {

        if (jTabbedPane1.getSelectedIndex() == 0) {
            resetEmployeePage();
        } else {
            clearCourseAllField();
            clearClassAllFieldMarkin();
        }

    }

    private void SelectTab2() {
        if (jTabbedPane2.getSelectedIndex() == 0) {
            clearCourseAllField();
        } else {
            clearClassAllFieldMarkin();
        }
    }

}
