/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.panal;

import GUI.popup.UpdateClasses;
import GUI.popup.UpdateCourses;
import cambodia.raven.Time;
import java.awt.HeadlessException;
import java.awt.Panel;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import modal.DB;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modal.beans.Admin;

/**
 *
 * @author dell
 */
public class ClassScheduleManagement extends javax.swing.JPanel {

    /**
     * Creates new form ClassScheduleManagement
     *
     * @param admin
     */
    public ClassScheduleManagement(Admin admin) {
        initComponents();

        this.admin = admin;

        loadClassId();//class
        loadCourseId();//course

        loadHall();//class
        loadCourseHall();//course

        loadScheduleStatus();

        classQueryMethod();//class schedule table load
        courseQueryMethod();//course schedule table load

        loadTableAuto();//class
        loadTableAutoCourse();//course

        loadHallType();

        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        classScheduleTable.setDefaultRenderer(Object.class, renderer);
        table1.setDefaultRenderer(Object.class, renderer);
        courseTable.setDefaultRenderer(Object.class, renderer);
        courseScheduleTable.setDefaultRenderer(Object.class, renderer);
        classScheduleReportTable.setDefaultRenderer(Object.class, renderer);
        courseScheduleReportTable.setDefaultRenderer(Object.class, renderer);

        startTimeField.setText("");
        endTimeField.setText("");
        courseStartTimeField.setText("");
        courseEndTimeField.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        time1 = new cambodia.raven.Time();
        time2 = new cambodia.raven.Time();
        time3 = new cambodia.raven.Time();
        time4 = new cambodia.raven.Time();
        jTabbedPaneClassSchedule = new javax.swing.JTabbedPane();
        ClassSchedule = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        searchTeacherIdField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        searchClassSubjectField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        searchGradeField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        selectHallTypeComboBox3 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        searchClassIDCombobox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        classScheduleTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        classIDCombobox = new javax.swing.JComboBox<>();
        hallLoadCombobox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        scheduleButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        resetAllButton = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        scheduleStatusCombobox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        endButton = new javax.swing.JButton();
        startTimeField = new javax.swing.JTextField();
        endTimeField = new javax.swing.JTextField();
        hallTypeComboBox2 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        capacityField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        classAutoloadeReset = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        students = new javax.swing.JLabel();
        courseSchedule = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        searchCourseSubjectField = new javax.swing.JTextField();
        searchCourseGradeField = new javax.swing.JTextField();
        searchCourseTeacherField = new javax.swing.JTextField();
        searchCourseHallTypeCombobox = new javax.swing.JComboBox<>();
        searchCourseIdCombobox = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        courseIdCombobox = new javax.swing.JComboBox<>();
        courseHallCombobox = new javax.swing.JComboBox<>();
        courseHallTypeCombobox = new javax.swing.JComboBox<>();
        courseScheduleStatusCombobox = new javax.swing.JComboBox<>();
        courseHallCapacityField = new javax.swing.JTextField();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        courseResetAllButton = new javax.swing.JButton();
        courseUpdateButton = new javax.swing.JButton();
        scheduleCourseButton = new javax.swing.JButton();
        cEndButton = new javax.swing.JButton();
        cStartButton = new javax.swing.JButton();
        courseStartTimeField = new javax.swing.JTextField();
        courseEndTimeField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        courseStudents = new javax.swing.JLabel();
        resetCourseSelection = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        courseScheduleTable = new javax.swing.JTable();
        scheduleReports = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        classScheduleReportTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        courseScheduleReportTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        classReportScheduleStatusCombobox = new javax.swing.JComboBox<>();
        classReportHallTypeCombobox = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        findClassButton = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        classReportIDField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        courseReportHallTypeCombobox = new javax.swing.JComboBox<>();
        courseReportScheduleStatusCombobox = new javax.swing.JComboBox<>();
        jDateChooser4 = new com.toedter.calendar.JDateChooser();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        findCourseReport = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        courseReportIDField = new javax.swing.JTextField();
        printClassReportButton = new javax.swing.JButton();
        viewClassReportButton = new javax.swing.JButton();
        resetClassReportButton = new javax.swing.JButton();
        printCourseReportButton = new javax.swing.JButton();
        viewCourseReportButton = new javax.swing.JButton();
        resetCourseReportButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        time1.setTextRefernce(startTimeField);

        time2.setTextRefernce(endTimeField);

        time3.setTextRefernce(courseStartTimeField);

        time4.setTextRefernce(courseEndTimeField);

        setBackground(new java.awt.Color(234, 238, 244));
        setPreferredSize(new java.awt.Dimension(967, 652));

        jTabbedPaneClassSchedule.setBackground(new java.awt.Color(234, 238, 244));
        jTabbedPaneClassSchedule.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jTabbedPaneClassSchedule.setPreferredSize(new java.awt.Dimension(967, 698));

        ClassSchedule.setBackground(new java.awt.Color(234, 238, 244));
        ClassSchedule.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        ClassSchedule.setPreferredSize(new java.awt.Dimension(967, 668));

        jPanel1.setBackground(new java.awt.Color(234, 238, 244));

        jPanel3.setBackground(new java.awt.Color(234, 238, 244));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Today Scheduled Search Area", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Poppins", 0, 18))); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(955, 652));

        jLabel12.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel12.setText("Teacher ID");

        searchTeacherIdField.setBackground(new java.awt.Color(240, 240, 240));
        searchTeacherIdField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchTeacherIdField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchTeacherIdField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTeacherIdFieldKeyReleased(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel13.setText("Subject");

        searchClassSubjectField.setBackground(new java.awt.Color(240, 240, 240));
        searchClassSubjectField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchClassSubjectField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchClassSubjectField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchClassSubjectFieldKeyReleased(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Grade");

        searchGradeField.setBackground(new java.awt.Color(240, 240, 240));
        searchGradeField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchGradeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchGradeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchGradeFieldKeyReleased(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel15.setText("Hall Type");

        selectHallTypeComboBox3.setBackground(new java.awt.Color(240, 240, 240));
        selectHallTypeComboBox3.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        selectHallTypeComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        selectHallTypeComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectHallTypeComboBox3ItemStateChanged(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel16.setText("Class ID");

        searchClassIDCombobox.setBackground(new java.awt.Color(240, 240, 240));
        searchClassIDCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchClassIDCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        searchClassIDCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchClassIDComboboxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchClassSubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectHallTypeComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchGradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTeacherIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchClassIDCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchClassSubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(selectHallTypeComboBox3)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchTeacherIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(searchGradeField))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(searchClassIDCombobox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        classScheduleTable.setBackground(new java.awt.Color(240, 240, 240));
        classScheduleTable.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classScheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Schedule ID", "Class ID", "Class Date", "Employee", "Schedule Status", "Hall No", "Hall Type", "Hall Capacity", "Start Time", "End Time", "Scheduled Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(classScheduleTable);

        jPanel4.setBackground(new java.awt.Color(234, 238, 244));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manual Schedule Select Area", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Poppins", 0, 18))); // NOI18N
        jPanel4.setMinimumSize(new java.awt.Dimension(764, 75));
        jPanel4.setPreferredSize(new java.awt.Dimension(764, 63));

        classIDCombobox.setBackground(new java.awt.Color(240, 240, 240));
        classIDCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classIDCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        classIDCombobox.setPreferredSize(new java.awt.Dimension(72, 35));
        classIDCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                classIDComboboxItemStateChanged(evt);
            }
        });
        classIDCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classIDComboboxActionPerformed(evt);
            }
        });

        hallLoadCombobox.setBackground(new java.awt.Color(240, 240, 240));
        hallLoadCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        hallLoadCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        hallLoadCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hallLoadComboboxItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Class ID");

        jLabel4.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Hall");

        jLabel5.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Hall Type");

        jLabel6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Class Date");

        scheduleButton.setBackground(new java.awt.Color(204, 204, 255));
        scheduleButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        scheduleButton.setText("Schedule New Class");
        scheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(204, 255, 204));
        updateButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        updateButton.setText("Update Status");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        resetAllButton.setBackground(new java.awt.Color(255, 204, 204));
        resetAllButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        resetAllButton.setText("Reset All");
        resetAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllButtonActionPerformed(evt);
            }
        });

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        jDateChooser1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        scheduleStatusCombobox.setBackground(new java.awt.Color(240, 240, 240));
        scheduleStatusCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        scheduleStatusCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "item1" }));

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Schedule Status");

        startButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        endButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        endButton.setText("End");
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        startTimeField.setBackground(new java.awt.Color(240, 240, 240));
        startTimeField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        startTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        startTimeField.setName(""); // NOI18N

        endTimeField.setBackground(new java.awt.Color(240, 240, 240));
        endTimeField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        endTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        hallTypeComboBox2.setBackground(new java.awt.Color(240, 240, 240));
        hallTypeComboBox2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        hallTypeComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        hallTypeComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hallTypeComboBox2ItemStateChanged(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Capacity");

        capacityField.setEditable(false);
        capacityField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        capacityField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classIDCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(endTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(scheduleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hallLoadCombobox, 0, 102, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hallTypeComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(capacityField)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scheduleStatusCombobox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(classIDCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(scheduleStatusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(hallLoadCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(capacityField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(hallTypeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(1, 1, 1)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                            .addComponent(startTimeField))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resetAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(scheduleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(endTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(endButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        startTimeField.getAccessibleContext().setAccessibleName("");
        endTimeField.getAccessibleContext().setAccessibleName("");

        table1.setBackground(new java.awt.Color(240, 240, 240));
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Class Id", "Teacher ID", "Teacher Name", "Grade", "Subject", "Hall Type", "Class Day", "Class Time", "Student Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table1.getTableHeader().setReorderingAllowed(false);
        table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(table1);
        if (table1.getColumnModel().getColumnCount() > 0) {
            table1.getColumnModel().getColumn(0).setResizable(false);
        }

        classAutoloadeReset.setBackground(new java.awt.Color(255, 204, 204));
        classAutoloadeReset.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        classAutoloadeReset.setText("Reset");
        classAutoloadeReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classAutoloadeResetActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setText("Today Classes Table");

        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 255));
        jLabel8.setText("Class Scheduled Table");

        jLabel9.setFont(new java.awt.Font("Poppins", 3, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 153));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Count Of Student For Class ");

        students.setFont(new java.awt.Font("Poppins", 3, 14)); // NOI18N
        students.setForeground(new java.awt.Color(0, 153, 153));
        students.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        students.setText("Null");
        students.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153), 2));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(students, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classAutoloadeReset)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(classAutoloadeReset, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(students, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ClassScheduleLayout = new javax.swing.GroupLayout(ClassSchedule);
        ClassSchedule.setLayout(ClassScheduleLayout);
        ClassScheduleLayout.setHorizontalGroup(
            ClassScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ClassScheduleLayout.setVerticalGroup(
            ClassScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPaneClassSchedule.addTab("Class Schedule", new javax.swing.ImageIcon(getClass().getResource("/source/add class.png")), ClassSchedule); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Today Scheduled", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Poppins", 0, 18))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Subject");

        jLabel11.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Hall Type");

        jLabel18.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Grade");

        jLabel19.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Teacher ID");

        jLabel20.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Couse ID");

        searchCourseSubjectField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchCourseSubjectField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchCourseSubjectField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCourseSubjectFieldKeyReleased(evt);
            }
        });

        searchCourseGradeField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchCourseGradeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchCourseGradeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCourseGradeFieldKeyReleased(evt);
            }
        });

        searchCourseTeacherField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchCourseTeacherField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchCourseTeacherField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCourseTeacherFieldKeyReleased(evt);
            }
        });

        searchCourseHallTypeCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchCourseHallTypeCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        searchCourseHallTypeCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchCourseHallTypeComboboxItemStateChanged(evt);
            }
        });

        searchCourseIdCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchCourseIdCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        searchCourseIdCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchCourseIdComboboxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCourseSubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCourseHallTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCourseGradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCourseTeacherField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchCourseIdCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCourseSubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCourseGradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCourseTeacherField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCourseHallTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCourseIdCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manual Schedule Select Area", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Poppins", 0, 18))); // NOI18N

        courseIdCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseIdCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        courseHallCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseHallCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        courseHallCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseHallComboboxItemStateChanged(evt);
            }
        });
        courseHallCombobox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                courseHallComboboxKeyReleased(evt);
            }
        });

        courseHallTypeCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseHallTypeCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        courseHallTypeCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseHallTypeComboboxItemStateChanged(evt);
            }
        });

        courseScheduleStatusCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseScheduleStatusCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        courseHallCapacityField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseHallCapacityField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jDateChooser2.setDateFormatString("yyyy-MM-dd");

        jLabel23.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Course ID");

        jLabel24.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Hall");

        jLabel25.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Hall Type");

        jLabel26.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Capacity");

        jLabel27.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Schedule Status");

        jLabel28.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Course Date");

        courseResetAllButton.setBackground(new java.awt.Color(255, 204, 204));
        courseResetAllButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        courseResetAllButton.setText("Reset All");
        courseResetAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseResetAllButtonActionPerformed(evt);
            }
        });

        courseUpdateButton.setBackground(new java.awt.Color(204, 255, 204));
        courseUpdateButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        courseUpdateButton.setText("Update Status");
        courseUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseUpdateButtonActionPerformed(evt);
            }
        });

        scheduleCourseButton.setBackground(new java.awt.Color(204, 204, 255));
        scheduleCourseButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        scheduleCourseButton.setText("Schedule New Course");
        scheduleCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleCourseButtonActionPerformed(evt);
            }
        });

        cEndButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        cEndButton.setText("End");
        cEndButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cEndButtonActionPerformed(evt);
            }
        });

        cStartButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        cStartButton.setText("Start");
        cStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cStartButtonActionPerformed(evt);
            }
        });

        courseStartTimeField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseStartTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        courseStartTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseStartTimeFieldActionPerformed(evt);
            }
        });

        courseEndTimeField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseEndTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(courseStartTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cStartButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(courseEndTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(courseIdCombobox, 0, 110, Short.MAX_VALUE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(courseHallCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(cEndButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(scheduleCourseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(courseHallTypeCombobox, 0, 142, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(courseHallCapacityField)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                        .addGap(12, 12, 12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(courseUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseScheduleStatusCombobox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(courseResetAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(courseIdCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(courseHallTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(courseScheduleStatusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(courseHallCapacityField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(courseHallCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(courseResetAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(courseEndTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cEndButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scheduleCourseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cStartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(courseStartTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel21.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 255));
        jLabel21.setText("Today Sheduled Course Table");

        jLabel22.setFont(new java.awt.Font("Poppins", 3, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 153, 153));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Count Of Student For Course ");

        courseStudents.setFont(new java.awt.Font("Poppins", 3, 14)); // NOI18N
        courseStudents.setForeground(new java.awt.Color(0, 153, 153));
        courseStudents.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        courseStudents.setText("Null");
        courseStudents.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153), 2));

        resetCourseSelection.setBackground(new java.awt.Color(255, 204, 204));
        resetCourseSelection.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        resetCourseSelection.setText("Reset");
        resetCourseSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCourseSelectionActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 255));
        jLabel29.setText("Course Schedule Table");

        courseTable.setBackground(new java.awt.Color(240, 240, 240));
        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Course Id", "Teacher ID", "Teacher Name", "Grade", "Subject", "Hall Type", "Course Day", "Course Time", "Start Date", "End Date", "Student Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseTable.getTableHeader().setReorderingAllowed(false);
        courseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(courseTable);
        if (courseTable.getColumnModel().getColumnCount() > 0) {
            courseTable.getColumnModel().getColumn(0).setResizable(false);
        }

        courseScheduleTable.setBackground(new java.awt.Color(240, 240, 240));
        courseScheduleTable.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseScheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Schedule ID", "Course ID", " Start  Date", "Employee", "Schedule Status", "Hall No", "Hall Type", "Hall Capacity", "Start Time", "End Time", "Scheduled Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseScheduleTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(courseScheduleTable);

        javax.swing.GroupLayout courseScheduleLayout = new javax.swing.GroupLayout(courseSchedule);
        courseSchedule.setLayout(courseScheduleLayout);
        courseScheduleLayout.setHorizontalGroup(
            courseScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseScheduleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(courseScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 955, Short.MAX_VALUE)
                    .addGroup(courseScheduleLayout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetCourseSelection))
                    .addGroup(courseScheduleLayout.createSequentialGroup()
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        courseScheduleLayout.setVerticalGroup(
            courseScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseScheduleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(courseScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(courseScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(courseStudents, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addComponent(resetCourseSelection, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
        );

        jTabbedPaneClassSchedule.addTab("Course Schedule", new javax.swing.ImageIcon(getClass().getResource("/source/add class.png")), courseSchedule); // NOI18N

        classScheduleReportTable.setBackground(new java.awt.Color(240, 240, 240));
        classScheduleReportTable.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classScheduleReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Schedule ID", "Class ID", "Class Date", "Employee", "Schedule Status", "Hall No", "Hall Type", "Hall Capacity", "Start Time", "End Time", "Scheduled Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(classScheduleReportTable);

        courseScheduleReportTable.setBackground(new java.awt.Color(240, 240, 240));
        courseScheduleReportTable.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseScheduleReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Schedule ID", "Course ID", " Start  Date", "Employee", "Schedule Status", "Hall No", "Hall Type", "Hall Capacity", "Start Time", "End Time", "Scheduled Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseScheduleReportTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(courseScheduleReportTable);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Class Schedule View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Poppins", 0, 18))); // NOI18N

        jDateChooser3.setDateFormatString("yyyy-MM-dd");

        classReportScheduleStatusCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classReportScheduleStatusCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        classReportHallTypeCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classReportHallTypeCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel30.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Search Date");

        jLabel31.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Search Status");

        jLabel32.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("Search Hall Type");

        findClassButton.setBackground(new java.awt.Color(204, 255, 204));
        findClassButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        findClassButton.setText("Find");
        findClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findClassButtonActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("Search Class ID");

        classReportIDField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classReportIDField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classReportScheduleStatusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classReportHallTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classReportIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(findClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(findClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classReportScheduleStatusCombobox, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classReportIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classReportHallTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Course Schedule View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Poppins", 0, 18))); // NOI18N

        courseReportHallTypeCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseReportHallTypeCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        courseReportScheduleStatusCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseReportScheduleStatusCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jDateChooser4.setDateFormatString("yyyy-MM-dd");

        jLabel33.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Search Date");

        jLabel34.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Search Status");

        jLabel35.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("Search Hall Type");

        findCourseReport.setBackground(new java.awt.Color(204, 255, 204));
        findCourseReport.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        findCourseReport.setText("Find");
        findCourseReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findCourseReportActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("Search Course ID");

        courseReportIDField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        courseReportIDField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseReportHallTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseReportScheduleStatusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseReportIDField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(findCourseReport, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(courseReportScheduleStatusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findCourseReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(courseReportHallTypeCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(courseReportIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        printClassReportButton.setBackground(new java.awt.Color(255, 255, 204));
        printClassReportButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        printClassReportButton.setText("Print");
        printClassReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printClassReportButtonActionPerformed(evt);
            }
        });

        viewClassReportButton.setBackground(new java.awt.Color(102, 255, 255));
        viewClassReportButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        viewClassReportButton.setText("View");

        resetClassReportButton.setBackground(new java.awt.Color(255, 204, 204));
        resetClassReportButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        resetClassReportButton.setText("Reset");
        resetClassReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetClassReportButtonActionPerformed(evt);
            }
        });

        printCourseReportButton.setBackground(new java.awt.Color(255, 255, 204));
        printCourseReportButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        printCourseReportButton.setText("Print");

        viewCourseReportButton.setBackground(new java.awt.Color(102, 255, 255));
        viewCourseReportButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        viewCourseReportButton.setText("View");

        resetCourseReportButton.setBackground(new java.awt.Color(255, 204, 204));
        resetCourseReportButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        resetCourseReportButton.setText("Reset");
        resetCourseReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCourseReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scheduleReportsLayout = new javax.swing.GroupLayout(scheduleReports);
        scheduleReports.setLayout(scheduleReportsLayout);
        scheduleReportsLayout.setHorizontalGroup(
            scheduleReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleReportsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane5)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scheduleReportsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(scheduleReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scheduleReportsLayout.createSequentialGroup()
                                .addComponent(resetClassReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewClassReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printClassReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scheduleReportsLayout.createSequentialGroup()
                                .addComponent(resetCourseReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewCourseReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printCourseReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        scheduleReportsLayout.setVerticalGroup(
            scheduleReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleReportsLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printClassReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewClassReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetClassReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printCourseReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewCourseReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetCourseReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPaneClassSchedule.addTab("View & Reports", new javax.swing.ImageIcon(getClass().getResource("/source/reports.png")), scheduleReports); // NOI18N

        jLabel1.setBackground(new java.awt.Color(234, 238, 244));
        jLabel1.setFont(new java.awt.Font("Poppins", 0, 24)); // NOI18N
        jLabel1.setText("Schedule Management");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneClassSchedule, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneClassSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
        );

        jTabbedPaneClassSchedule.getAccessibleContext().setAccessibleName("View");
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(this); // Get the JFrame ancestor of the JPanel

        UpdateClasses uc = new UpdateClasses(parentFrame, true); // Create the dialog, setting parentFrame as its owner
        uc.setVisible(true);

        classQueryMethod();
        reset();

    }//GEN-LAST:event_updateButtonActionPerformed

    private void classIDComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classIDComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_classIDComboboxActionPerformed

    private void hallLoadComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hallLoadComboboxItemStateChanged
        changeCapacity(); // change capacity from hall number
    }//GEN-LAST:event_hallLoadComboboxItemStateChanged

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        time1.showPopup();
    }//GEN-LAST:event_startButtonActionPerformed

    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        time2.showPopup();
    }//GEN-LAST:event_endButtonActionPerformed

    private void searchClassSubjectFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchClassSubjectFieldKeyReleased
        searchBySubject();
    }//GEN-LAST:event_searchClassSubjectFieldKeyReleased

    private void table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table1MouseClicked

        try {
            if (evt.getClickCount() == 2) {
                int selectedRow = table1.getSelectedRow();

                if (selectedRow != -1) {

                    classIDCombobox.setSelectedItem(String.valueOf(table1.getValueAt(selectedRow, 0)));
                    hallTypeComboBox2.setSelectedItem(String.valueOf(table1.getValueAt(selectedRow, 5)));
                    students.setText(String.valueOf(table1.getValueAt(selectedRow, 8)));

                    String time = String.valueOf(table1.getValueAt(selectedRow, 7));

                    String time24hr = time;  // Example 24-hour time format (HH:mm:ss)

                    // Parse the 24-hour time string
                    Date day = format24hr.parse(time24hr);
                    // Format it into 12-hour format
                    String time12hr = format12hr.format(day);

                    startTimeField.setText(time12hr);

                }
                resetAutoLoadTable();
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_table1MouseClicked

    private void hallTypeComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hallTypeComboBox2ItemStateChanged
        loadroomdata(); //change hall data from double tap with table1

    }//GEN-LAST:event_hallTypeComboBox2ItemStateChanged

    private void selectHallTypeComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectHallTypeComboBox3ItemStateChanged
        searchByHallType();
        searchClassIDCombobox.setSelectedIndex(0);
    }//GEN-LAST:event_selectHallTypeComboBox3ItemStateChanged

    private void searchGradeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchGradeFieldKeyReleased
        searchByGrade();
    }//GEN-LAST:event_searchGradeFieldKeyReleased

    private void searchTeacherIdFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTeacherIdFieldKeyReleased
        searchByTeacherId();
    }//GEN-LAST:event_searchTeacherIdFieldKeyReleased

    private void searchClassIDComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchClassIDComboboxItemStateChanged
        searchByClassCourseId();
        selectHallTypeComboBox3.setSelectedIndex(0);
    }//GEN-LAST:event_searchClassIDComboboxItemStateChanged

    private void classIDComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_classIDComboboxItemStateChanged

    }//GEN-LAST:event_classIDComboboxItemStateChanged

    private void resetAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllButtonActionPerformed
        reset();
    }//GEN-LAST:event_resetAllButtonActionPerformed

    private void classAutoloadeResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classAutoloadeResetActionPerformed
        resetAutoLoadTable();
        students.setText("Null");
    }//GEN-LAST:event_classAutoloadeResetActionPerformed

    private void scheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleButtonActionPerformed
        scheduleClasses();
    }//GEN-LAST:event_scheduleButtonActionPerformed

    private void courseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseTableMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                int selectedRow = courseTable.getSelectedRow();

                if (selectedRow != -1) {

                    courseIdCombobox.setSelectedItem(String.valueOf(courseTable.getValueAt(selectedRow, 0)));
                    courseHallTypeCombobox.setSelectedItem(String.valueOf(courseTable.getValueAt(selectedRow, 5)));
                    courseStudents.setText(String.valueOf(courseTable.getValueAt(selectedRow, 10)));

                    String time = String.valueOf(courseTable.getValueAt(selectedRow, 7));

                    String time24hr = time;  // Example 24-hour time format (HH:mm:ss)

                    // Parse the 24-hour time string
                    Date day = format24hr.parse(time24hr);
                    // Format it into 12-hour format
                    String time12hr = format12hr.format(day);

                    courseStartTimeField.setText(time12hr);

                }
                resetCourseAutoLoadTable();
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_courseTableMouseClicked

    private void courseHallComboboxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_courseHallComboboxKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_courseHallComboboxKeyReleased

    private void courseHallComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseHallComboboxItemStateChanged
        changecourseCapacity();
    }//GEN-LAST:event_courseHallComboboxItemStateChanged

    private void courseHallTypeComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseHallTypeComboboxItemStateChanged
        loadcourseroomdata();
    }//GEN-LAST:event_courseHallTypeComboboxItemStateChanged

    private void searchCourseSubjectFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCourseSubjectFieldKeyReleased
        searchBySubject();
    }//GEN-LAST:event_searchCourseSubjectFieldKeyReleased

    private void searchCourseHallTypeComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchCourseHallTypeComboboxItemStateChanged
        searchByHallType();
        searchCourseIdCombobox.setSelectedIndex(0);
    }//GEN-LAST:event_searchCourseHallTypeComboboxItemStateChanged

    private void searchCourseGradeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCourseGradeFieldKeyReleased
        searchByGrade();
    }//GEN-LAST:event_searchCourseGradeFieldKeyReleased

    private void searchCourseTeacherFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCourseTeacherFieldKeyReleased
        searchByTeacherId();
    }//GEN-LAST:event_searchCourseTeacherFieldKeyReleased

    private void searchCourseIdComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchCourseIdComboboxItemStateChanged
        searchByClassCourseId();
        searchCourseHallTypeCombobox.setSelectedIndex(0);
    }//GEN-LAST:event_searchCourseIdComboboxItemStateChanged

    private void courseResetAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseResetAllButtonActionPerformed
        resetCourse();
    }//GEN-LAST:event_courseResetAllButtonActionPerformed

    private void resetCourseSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCourseSelectionActionPerformed
        resetCourseAutoLoadTable();
        courseStudents.setText("Null");
    }//GEN-LAST:event_resetCourseSelectionActionPerformed

    private void cStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cStartButtonActionPerformed
        time3.showPopup();
    }//GEN-LAST:event_cStartButtonActionPerformed

    private void cEndButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cEndButtonActionPerformed
        time4.showPopup();
    }//GEN-LAST:event_cEndButtonActionPerformed

    private void courseStartTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseStartTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseStartTimeFieldActionPerformed

    private void scheduleCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleCourseButtonActionPerformed
        scheduleCourses();
    }//GEN-LAST:event_scheduleCourseButtonActionPerformed

    private void courseUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseUpdateButtonActionPerformed
        JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(this); // Get the JFrame ancestor of the JPanel

        UpdateCourses uc = new UpdateCourses(parentFrame, true); // Create the dialog, setting parentFrame as its owner
        uc.setVisible(true);

        courseQueryMethod();
        resetCourse();
    }//GEN-LAST:event_courseUpdateButtonActionPerformed

    private void printClassReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printClassReportButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_printClassReportButtonActionPerformed

    private void findClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findClassButtonActionPerformed
        searchClassSchedule();
    }//GEN-LAST:event_findClassButtonActionPerformed

    private void findCourseReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findCourseReportActionPerformed
        searchCourseSchedule();
    }//GEN-LAST:event_findCourseReportActionPerformed

    private void resetClassReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetClassReportButtonActionPerformed
        classReportingReset();
    }//GEN-LAST:event_resetClassReportButtonActionPerformed

    private void resetCourseReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCourseReportButtonActionPerformed
        courseReportingReset();
    }//GEN-LAST:event_resetCourseReportButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ClassSchedule;
    private javax.swing.JButton cEndButton;
    private javax.swing.JButton cStartButton;
    private javax.swing.JTextField capacityField;
    private javax.swing.JButton classAutoloadeReset;
    private javax.swing.JComboBox<String> classIDCombobox;
    private javax.swing.JComboBox<String> classReportHallTypeCombobox;
    private javax.swing.JTextField classReportIDField;
    private javax.swing.JComboBox<String> classReportScheduleStatusCombobox;
    private javax.swing.JTable classScheduleReportTable;
    private javax.swing.JTable classScheduleTable;
    private javax.swing.JTextField courseEndTimeField;
    private javax.swing.JTextField courseHallCapacityField;
    private javax.swing.JComboBox<String> courseHallCombobox;
    private javax.swing.JComboBox<String> courseHallTypeCombobox;
    private javax.swing.JComboBox<String> courseIdCombobox;
    private javax.swing.JComboBox<String> courseReportHallTypeCombobox;
    private javax.swing.JTextField courseReportIDField;
    private javax.swing.JComboBox<String> courseReportScheduleStatusCombobox;
    private javax.swing.JButton courseResetAllButton;
    private javax.swing.JPanel courseSchedule;
    private javax.swing.JTable courseScheduleReportTable;
    private javax.swing.JComboBox<String> courseScheduleStatusCombobox;
    private javax.swing.JTable courseScheduleTable;
    private javax.swing.JTextField courseStartTimeField;
    private javax.swing.JLabel courseStudents;
    private javax.swing.JTable courseTable;
    private javax.swing.JButton courseUpdateButton;
    private javax.swing.JButton endButton;
    private javax.swing.JTextField endTimeField;
    private javax.swing.JButton findClassButton;
    private javax.swing.JButton findCourseReport;
    private javax.swing.JComboBox<String> hallLoadCombobox;
    private javax.swing.JComboBox<String> hallTypeComboBox2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private com.toedter.calendar.JDateChooser jDateChooser4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPaneClassSchedule;
    private javax.swing.JButton printClassReportButton;
    private javax.swing.JButton printCourseReportButton;
    private javax.swing.JButton resetAllButton;
    private javax.swing.JButton resetClassReportButton;
    private javax.swing.JButton resetCourseReportButton;
    private javax.swing.JButton resetCourseSelection;
    private javax.swing.JButton scheduleButton;
    private javax.swing.JButton scheduleCourseButton;
    private javax.swing.JPanel scheduleReports;
    private javax.swing.JComboBox<String> scheduleStatusCombobox;
    private javax.swing.JComboBox<String> searchClassIDCombobox;
    private javax.swing.JTextField searchClassSubjectField;
    private javax.swing.JTextField searchCourseGradeField;
    private javax.swing.JComboBox<String> searchCourseHallTypeCombobox;
    private javax.swing.JComboBox<String> searchCourseIdCombobox;
    private javax.swing.JTextField searchCourseSubjectField;
    private javax.swing.JTextField searchCourseTeacherField;
    private javax.swing.JTextField searchGradeField;
    private javax.swing.JTextField searchTeacherIdField;
    private javax.swing.JComboBox<String> selectHallTypeComboBox3;
    private javax.swing.JButton startButton;
    private javax.swing.JTextField startTimeField;
    private javax.swing.JLabel students;
    private javax.swing.JTable table1;
    private cambodia.raven.Time time1;
    private cambodia.raven.Time time2;
    private cambodia.raven.Time time3;
    private cambodia.raven.Time time4;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewClassReportButton;
    private javax.swing.JButton viewCourseReportButton;
    // End of variables declaration//GEN-END:variables

    // Hash Maps
    private static HashMap<String, String> scheduleStautusMap = new HashMap<>(); //for get id from schedule status

    private Admin admin;

    //get date of week
    LocalDate today = LocalDate.now();
    DayOfWeek dayOfWeek = today.getDayOfWeek();

    // currunt date
    Date currentDate = new Date();

    //convort time
    SimpleDateFormat format24hr = new SimpleDateFormat("HH:mm:ss");
    SimpleDateFormat format12hr = new SimpleDateFormat("hh:mm a");

    //class schedule--------------------------------------------------------------------------------------------------------------------
    //loadclassID for Combobox
    private void loadClassId() {
        try {

            ResultSet resultSet = DB.search("SELECT `id` FROM `class`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("id"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);//class
            DefaultComboBoxModel ComboBoxModel1 = new DefaultComboBoxModel(vector);//course

            classIDCombobox.setModel(ComboBoxModel);//class
            searchClassIDCombobox.setModel(ComboBoxModel1);//course

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }

    }

    //loadHall for Combobox(class)
    private void loadHall() {
        try {

            ResultSet resultSet = DB.search("SELECT `id` FROM `class_room`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("id"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);

            hallLoadCombobox.setModel(ComboBoxModel);

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    // load classschedule table
    private void loadClassSchedulTable(String query) {
        try {

            ResultSet resultSet = DB.search(query);

            DefaultTableModel tableModel = (DefaultTableModel) classScheduleTable.getModel();
            DefaultTableModel tableModelReport = (DefaultTableModel) classScheduleReportTable.getModel();
            tableModel.setRowCount(0);
            tableModelReport.setRowCount(0);

            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("class_schedule.id"));
                vector.add(resultSet.getString("class.id"));
                vector.add(resultSet.getString("class_date"));
                vector.add(resultSet.getString("employee.fname") + " " + resultSet.getString("employee.lname"));
                vector.add(resultSet.getString("schedule_status.statats"));
                vector.add(resultSet.getString("class_room.id"));
                vector.add(resultSet.getString("room_type.type"));
                vector.add(resultSet.getString("class_room.capacity"));
                vector.add(resultSet.getString("start_time"));
                vector.add(resultSet.getString("end_time"));
                vector.add(resultSet.getString("shedule_time"));

                tableModel.addRow(vector);
                tableModelReport.addRow(vector);
            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    // load auto classschedule table by day of the week
    private void loadAutoClassScheduleTable(String query) {

        try {

            ResultSet resultSet = DB.search(query);

            DefaultTableModel tableModel = (DefaultTableModel) table1.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {

                Vector vector = new Vector();
                vector.add(resultSet.getString("class.id"));
                vector.add(resultSet.getString("teacher.nic"));
                vector.add(resultSet.getString("teacher.fname") + " " + resultSet.getString("teacher.lname"));
                vector.add(resultSet.getString("grade.name"));
                vector.add(resultSet.getString("subject.name"));
                vector.add(resultSet.getString("room_type.type"));
                vector.add(resultSet.getString("week_day.day"));
                vector.add(resultSet.getString("class_day.time"));
                vector.add(resultSet.getString("total_students"));

                tableModel.addRow(vector);
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }

    }

    // load class & course schedule status for combo box
    private void loadScheduleStatus() {

        try {

            ResultSet resultSet = DB.search("SELECT * FROM `schedule_status`");

            Vector<String> vector = new Vector<>();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("statats"));
                scheduleStautusMap.put(resultSet.getString("statats"), resultSet.getString("id"));

            }

            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(vector);//class
            DefaultComboBoxModel<String> comboBoxModelCourseReport = new DefaultComboBoxModel<>(vector);//class report
            DefaultComboBoxModel<String> comboBoxModel1 = new DefaultComboBoxModel<>(vector);//course
            DefaultComboBoxModel<String> comboBoxModel1ClassReport = new DefaultComboBoxModel<>(vector);//course report

            scheduleStatusCombobox.setModel(comboBoxModel);//class
            classReportScheduleStatusCombobox.setModel(comboBoxModelCourseReport);//class report
            courseScheduleStatusCombobox.setModel(comboBoxModel1);//course
            courseReportScheduleStatusCombobox.setModel(comboBoxModel1ClassReport);//course report

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }

    }

    // load class & class Hall type status for combo box
    private void loadHallType() {
        try {

            ResultSet resultSet = DB.search("SELECT `type` FROM `room_type`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("type"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);//class
            DefaultComboBoxModel ComboBoxModel1 = new DefaultComboBoxModel(vector);//class

            DefaultComboBoxModel ComboBoxModelClassReport1 = new DefaultComboBoxModel(vector);//class report

            DefaultComboBoxModel ComboBoxModel2 = new DefaultComboBoxModel(vector);//course
            DefaultComboBoxModel ComboBoxModel3 = new DefaultComboBoxModel(vector);//course

            DefaultComboBoxModel ComboBoxModelCourseReport1 = new DefaultComboBoxModel(vector);//course report

            hallTypeComboBox2.setModel(ComboBoxModel);//class
            selectHallTypeComboBox3.setModel(ComboBoxModel1);//class

            classReportHallTypeCombobox.setModel(ComboBoxModelClassReport1);//class report

            courseHallTypeCombobox.setModel(ComboBoxModel2);//course
            searchCourseHallTypeCombobox.setModel(ComboBoxModel3);//course

            courseReportHallTypeCombobox.setModel(ComboBoxModelCourseReport1);//course report

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    //change hall data from double tap with table1(class)
    private void loadroomdata() {
        String selectedType = String.valueOf(hallTypeComboBox2.getSelectedItem());
        try {

            ResultSet resultSet = DB.search("SELECT * FROM class_room INNER JOIN room_type "
                    + "ON room_type.id = class_room.room_type_id WHERE type = '" + selectedType + "'");

            Vector<String> vector = new Vector<>();
            // Iterate through the result set
            boolean firstRow = true;
            while (resultSet.next()) {
                if (firstRow) {
                    // Set capacityField text from the first row only
                    capacityField.setText(resultSet.getString("capacity"));
                    firstRow = false;
                }
                // Add each "id" to the vector
                vector.add(resultSet.getString("id"));
            }
            // Set the vector as the model for hallLoadCombobox
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(vector);
            hallLoadCombobox.setModel(model);

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    // change capacyty fron item change of hall load combo box(claas & course)
    private void changeCapacity() {
        try {
            String selectedHall = String.valueOf(hallLoadCombobox.getSelectedItem());//class
            String selectedHall2 = String.valueOf(courseHallCombobox.getSelectedItem());//course

            ResultSet resultSet = DB.search(
                    "SELECT `capacity` FROM `class_room` WHERE `id` IN ('" + selectedHall + "', '" + selectedHall2 + "')"
            );

            if (resultSet.next()) {
                capacityField.setText(resultSet.getString("capacity"));//class
            }
            if (resultSet.next()) {
                courseHallCapacityField.setText(resultSet.getString("capacity"));//course
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    //class schedule area
    private void reset() {

        classIDCombobox.setSelectedIndex(0);
        hallLoadCombobox.setSelectedIndex(0);
        hallTypeComboBox2.setSelectedIndex(0);
        scheduleStatusCombobox.setSelectedIndex(0);
        capacityField.setText("");
        startTimeField.setText("");
        endTimeField.setText("");
        students.setText("Null");
        jDateChooser1.setDate(null);

        classQueryMethod();
        loadHall();
        resetAutoLoadTable();
    }

    //class
    private void resetAutoLoadTable() {
        selectHallTypeComboBox3.setSelectedIndex(0);
        searchClassIDCombobox.setSelectedIndex(0);
        searchClassSubjectField.setText("");
        searchGradeField.setText("");
        searchTeacherIdField.setText("");
        loadTableAuto();
    }

    //loadeclasstableAuto
    private void loadTableAuto() {
        loadAutoClassScheduleTable("SELECT "
                + "    `class_day`.*,"
                + "    `week_day`.*,"
                + "    `class`.*,"
                + "    `subject`.*,"
                + "    `room_type`.*,"
                + "    `teacher`.*,"
                + "    `grade`.*,"
                + "    COALESCE(`student_count`.`total_students`, 0) AS `total_students`"
                + "FROM "
                + "    `class_day`"
                + "INNER JOIN "
                + "    `week_day` ON `week_day`.`id` = `class_day`.`week_day_id`"
                + "INNER JOIN "
                + "    `class` ON `class`.`id` = `class_day`.`class_id`"
                + "INNER JOIN "
                + "    `subject` ON `subject`.`id` = `class`.`subject_id`"
                + "INNER JOIN "
                + "    `room_type` ON `room_type`.`id` = `class`.`room_type_id`"
                + "INNER JOIN "
                + "    `teacher` ON `teacher`.`nic` = `class`.`teacher_nic`"
                + "INNER JOIN "
                + "    `grade` ON `grade`.`id` = `class`.`grade_id`"
                + "LEFT JOIN "
                + "    ("
                + "        SELECT "
                + "            `class_enrollment`.`class_id`, "
                + "            COUNT(`class_enrollment`.`student_id`) AS `total_students`"
                + "        FROM "
                + "            `class_enrollment`"
                + "        INNER JOIN "
                + "            `class_day` ON `class_day`.`class_id` = `class_enrollment`.`class_id`"
                + "        INNER JOIN "
                + "            `week_day` ON `week_day`.`id` = `class_day`.`week_day_id`"
                + "        WHERE "
                + "            `week_day`.`day` = '" + dayOfWeek + "'"
                + "        GROUP BY "
                + "            `class_enrollment`.`class_id`"
                + "    ) AS `student_count` "
                + "ON "
                + "    `student_count`.`class_id` = `class`.`id` WHERE `week_day`.`day` = '" + dayOfWeek + "' "
                + "ORDER BY `class_day`.`time` ASC");
    }

    // method to generate the SQL query based on search(class)
    private String generateClassScheduleQuery(String condition) {
        return "SELECT "
                + "    `class_day`.*, "
                + "    `week_day`.*, "
                + "    `class`.*, "
                + "    `subject`.*, "
                + "    `room_type`.*, "
                + "    `teacher`.*, "
                + "    `grade`.*, "
                + "    COALESCE(`student_count`.`total_students`, 0) AS `total_students` "
                + "FROM "
                + "    `class_day` "
                + "INNER JOIN "
                + "    `week_day` ON `week_day`.`id` = `class_day`.`week_day_id` "
                + "INNER JOIN "
                + "    `class` ON `class`.`id` = `class_day`.`class_id` "
                + "INNER JOIN "
                + "    `subject` ON `subject`.`id` = `class`.`subject_id` "
                + "INNER JOIN "
                + "    `room_type` ON `room_type`.`id` = `class`.`room_type_id` "
                + "INNER JOIN "
                + "    `teacher` ON `teacher`.`nic` = `class`.`teacher_nic` "
                + "INNER JOIN "
                + "    `grade` ON `grade`.`id` = `class`.`grade_id` "
                + "LEFT JOIN "
                + "    ( "
                + "        SELECT "
                + "            `class_enrollment`.`class_id`, "
                + "            COUNT(`class_enrollment`.`student_id`) AS `total_students` "
                + "        FROM "
                + "            `class_enrollment` "
                + "        INNER JOIN "
                + "            `class_day` ON `class_day`.`class_id` = `class_enrollment`.`class_id` "
                + "        INNER JOIN "
                + "            `week_day` ON `week_day`.`id` = `class_day`.`week_day_id` "
                + "        WHERE "
                + "            `week_day`.`day` = '" + dayOfWeek + "' "
                + "        GROUP BY "
                + "            `class_enrollment`.`class_id` "
                + "    ) AS `student_count` "
                + "ON "
                + "    `student_count`.`class_id` = `class`.`id` "
                + "WHERE `week_day`.`day` = '" + dayOfWeek + "' "
                + condition
                + "ORDER BY `class_day`.`time` ASC";
    }
    //class & course Search parts---------------------------------------------------------------------------------------------------------
    // Search by subject

    private void searchBySubject() {

        String subject = searchClassSubjectField.getText();//class
        String coursesubject = searchCourseSubjectField.getText();//course

        //class
        if (subject.equals(subject)) {
            String query = generateClassScheduleQuery("AND `subject`.`name` LIKE '%" + subject + "%'");
            loadAutoClassScheduleTable(query);
            searchClassSubjectField.setText(subject);
        }
        //course
        if (coursesubject.equals(coursesubject)) {
            String query = generateCourseScheduleQuery("AND `subject`.`name` LIKE '%" + coursesubject + "%'");
            loadAutoCourseTable(query);
            searchCourseSubjectField.setText(coursesubject);
        }
    }

    // Search by hall type
    private void searchByHallType() {
        String hall = String.valueOf(selectHallTypeComboBox3.getSelectedItem());
        String coursehall = String.valueOf(searchCourseHallTypeCombobox.getSelectedItem());

        // Check if a valid class hall type is selected
        if (hall != null && !hall.isEmpty() && !hall.equals("Select")) {
            String query = generateClassScheduleQuery("AND `room_type`.`type` LIKE '%" + hall + "%'");
            loadAutoClassScheduleTable(query);
        }

        // Check if a valid course hall type is selected
        if (coursehall != null && !coursehall.isEmpty() && !coursehall.equals("Select")) {
            String query = generateCourseScheduleQuery("AND `room_type`.`type` LIKE '%" + coursehall + "%'");
            loadAutoCourseTable(query);
        }
    }

    // Search by grade
    private void searchByGrade() {
        String grade1 = searchGradeField.getText();//class
        String coursegrade = searchCourseGradeField.getText();//course

        //class
        if (grade1.equals(grade1)) {
            String query = generateClassScheduleQuery("AND `grade`.`name` LIKE '%" + grade1 + "%'");
            loadAutoClassScheduleTable(query);
            searchGradeField.setText(grade1);
        }
        //course
        if (coursegrade.equals(coursegrade)) {
            String query = generateCourseScheduleQuery("AND `grade`.`name` LIKE '%" + coursegrade + "%'");
            loadAutoCourseTable(query);
            searchCourseGradeField.setText(grade1);
        }

    }

    // Search by teacher ID
    private void searchByTeacherId() {
        String teacher1 = searchTeacherIdField.getText();//class
        String courseteacher = searchCourseTeacherField.getText();//course

        //class
        if (teacher1.equals(teacher1)) {
            String query = generateClassScheduleQuery("AND `teacher`.`nic` LIKE '%" + teacher1 + "%'");
            loadAutoClassScheduleTable(query);
            searchTeacherIdField.setText(teacher1);
        }
        //course
        if (courseteacher.equals(courseteacher)) {
            String query = generateCourseScheduleQuery("AND `teacher`.`nic` LIKE '%" + courseteacher + "%'");
            loadAutoCourseTable(query);
            searchCourseTeacherField.setText(courseteacher);
        }
    }

    // Search by classcourse ID
    private void searchByClassCourseId() {
        String classId = String.valueOf(searchClassIDCombobox.getSelectedItem());//class
        String courseId = String.valueOf(searchCourseIdCombobox.getSelectedItem());//course

        // Check if a valid class ID is selected
        if (classId != null && !classId.isEmpty() && !classId.equals("Select")) {
            String query = generateClassScheduleQuery("AND `class`.`id` LIKE '%" + classId + "%'");
            loadAutoClassScheduleTable(query);
        }

        // Check if a valid course ID is selected
        if (courseId != null && !courseId.isEmpty() && !courseId.equals("Select")) {
            String query = generateCourseScheduleQuery("AND `course`.`id` LIKE '%" + courseId + "%'");
            loadAutoCourseTable(query);
        }
    }
    //class & course Searching Parts--------------------------------------------------------------------------------------------

    //class schedule------------------------------------------------------------------------------------------------------------
    // course schedule----------------------------------------------------------------------------------------------------------
    private void loadCourseId() {
        try {

            ResultSet resultSet = DB.search("SELECT `id` FROM `course`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("id"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);
            DefaultComboBoxModel ComboBoxModel1 = new DefaultComboBoxModel(vector);

            courseIdCombobox.setModel(ComboBoxModel);
            searchCourseIdCombobox.setModel(ComboBoxModel1);

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadCourseSchedulTable(String query) {
        try {

            ResultSet resultSet = DB.search(query);

            DefaultTableModel tableModel = (DefaultTableModel) courseScheduleTable.getModel();
            DefaultTableModel tableModelReport = (DefaultTableModel) courseScheduleReportTable.getModel();
            tableModel.setRowCount(0);
            tableModelReport.setRowCount(0);

            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("course_schedule.id"));
                vector.add(resultSet.getString("course.id"));
                vector.add(resultSet.getString("class_date"));
                vector.add(resultSet.getString("employee.fname") + " " + resultSet.getString("employee.lname"));
                vector.add(resultSet.getString("schedule_status.statats"));
                vector.add(resultSet.getString("class_room.id"));
                vector.add(resultSet.getString("room_type.type"));
                vector.add(resultSet.getString("class_room.capacity"));
                vector.add(resultSet.getString("start_time"));
                vector.add(resultSet.getString("end_time"));
                vector.add(resultSet.getString("shedule_time"));

                tableModel.addRow(vector);
                tableModelReport.addRow(vector);
            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    // load auto course schedule table by day of the week
    private void loadTableAutoCourse() {
        loadAutoCourseTable("SELECT "
                + "    `course_day`.*, "
                + "    `week_day`.*, "
                + "    `course`.*, "
                + "    `subject`.*, "
                + "    `room_type`.*, "
                + "    `teacher`.*, "
                + "    `grade`.*, "
                + "    COALESCE(`student_count`.`total_students`, 0) AS `total_students` "
                + "FROM "
                + "    `course_day` "
                + "INNER JOIN "
                + "    `week_day` ON `week_day`.`id` = `course_day`.`week_day_id` "
                + "INNER JOIN "
                + "    `course` ON `course`.`id` = `course_day`.`course_id` "
                + "INNER JOIN "
                + "    `subject` ON `subject`.`id` = `course`.`subject_id` "
                + "INNER JOIN "
                + "    `room_type` ON `room_type`.`id` = `course`.`room_type_id` "
                + "INNER JOIN "
                + "    `teacher` ON `teacher`.`nic` = `course`.`teacher_nic` "
                + "INNER JOIN "
                + "    `grade` ON `grade`.`id` = `course`.`grade_id` "
                + "LEFT JOIN "
                + "    ("
                + "       SELECT "
                + "           `course_enrollment`.`course_id`, "
                + "           COUNT(`course_enrollment`.`student_id`) AS `total_students` "
                + "       FROM "
                + "           `course_enrollment` "
                + "       INNER JOIN "
                + "           `course_day` ON `course_day`.`course_id` = `course_enrollment`.`course_id` "
                + "       INNER JOIN "
                + "           `week_day` ON `week_day`.`id` = `course_day`.`week_day_id` "
                + "       WHERE "
                + "           `week_day`.`day` = '" + dayOfWeek + "' "
                + "       GROUP BY "
                + "           `course_enrollment`.`course_id` "
                + "    ) AS `student_count` "
                + "ON "
                + "    `student_count`.`course_id` = `course`.`id` "
                + "WHERE "
                + "    `week_day`.`day` = '" + dayOfWeek + "' "
                + "ORDER BY "
                + "    `course_day`.`time` ASC");
    }

    // method to generate the SQL query based on search(course)
    private String generateCourseScheduleQuery(String condition) {
        return "SELECT "
                + "    `course_day`.*, "
                + "    `week_day`.*, "
                + "    `course`.*, "
                + "    `subject`.*, "
                + "    `room_type`.*, "
                + "    `teacher`.*, "
                + "    `grade`.*, "
                + "    COALESCE(`student_count`.`total_students`, 0) AS `total_students` "
                + "FROM "
                + "    `course_day` "
                + "INNER JOIN "
                + "    `week_day` ON `week_day`.`id` = `course_day`.`week_day_id` "
                + "INNER JOIN "
                + "    `course` ON `course`.`id` = `course_day`.`course_id` "
                + "INNER JOIN "
                + "    `subject` ON `subject`.`id` = `course`.`subject_id` "
                + "INNER JOIN "
                + "    `room_type` ON `room_type`.`id` = `course`.`room_type_id` "
                + "INNER JOIN "
                + "    `teacher` ON `teacher`.`nic` = `course`.`teacher_nic` "
                + "INNER JOIN "
                + "    `grade` ON `grade`.`id` = `course`.`grade_id` "
                + "LEFT JOIN "
                + "    ("
                + "       SELECT "
                + "           `course_enrollment`.`course_id`, "
                + "           COUNT(`course_enrollment`.`student_id`) AS `total_students` "
                + "       FROM "
                + "           `course_enrollment` "
                + "       INNER JOIN "
                + "           `course_day` ON `course_day`.`course_id` = `course_enrollment`.`course_id` "
                + "       INNER JOIN "
                + "           `week_day` ON `week_day`.`id` = `course_day`.`week_day_id` "
                + "       WHERE "
                + "           `week_day`.`day` = '" + dayOfWeek + "' "
                + "       GROUP BY "
                + "           `course_enrollment`.`course_id` "
                + "    ) AS `student_count` "
                + "ON "
                + "    `student_count`.`course_id` = `course`.`id` "
                + "WHERE "
                + "    `week_day`.`day` = '" + dayOfWeek + "' "
                + condition
                + "ORDER BY "
                + "    `course_day`.`time` ASC";
    }

    //load course Table Auto
    private void loadAutoCourseTable(String query) {
        try {

            ResultSet resultSet = DB.search(query);

            DefaultTableModel tableModel = (DefaultTableModel) courseTable.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {

                Vector vector = new Vector();
                vector.add(resultSet.getString("course.id"));
                vector.add(resultSet.getString("teacher.nic"));
                vector.add(resultSet.getString("teacher.fname") + " " + resultSet.getString("teacher.lname"));
                vector.add(resultSet.getString("grade.name"));
                vector.add(resultSet.getString("subject.name"));
                vector.add(resultSet.getString("room_type.type"));
                vector.add(resultSet.getString("week_day.day"));
                vector.add(resultSet.getString("course_day.time"));
                vector.add(resultSet.getString("course.start_date"));
                vector.add(resultSet.getString("course.end_date"));
                vector.add(resultSet.getString("total_students"));

                tableModel.addRow(vector);
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    // change capacyty from item change of course hall load combo box
    private void changecourseCapacity() {

        String selectedHall2 = String.valueOf(courseHallCombobox.getSelectedItem());

        try {
            ResultSet resultSet2 = DB.search("SELECT capacity FROM class_room WHERE id = '" + selectedHall2 + "'");

            boolean firstRow = true;
            while (resultSet2.next()) {
                if (firstRow) {
                    // Set capacityField text from the first row only
                    courseHallCapacityField.setText(resultSet2.getString("capacity"));
                    firstRow = false;
                }

            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }

    }

    //change course hall data from double tap with table1
    private void loadcourseroomdata() {
        String selectedType2 = String.valueOf(courseHallTypeCombobox.getSelectedItem());
        try {

            ResultSet resultSet2 = DB.search("SELECT * FROM class_room INNER JOIN room_type "
                    + "ON room_type.id = class_room.room_type_id WHERE type = '" + selectedType2 + "'");

            Vector<String> vector = new Vector<>();
            // Iterate through the result set
            boolean firstRow = true;
            while (resultSet2.next()) {
                if (firstRow) {
                    // Set capacityField text from the first row only
                    courseHallCapacityField.setText(resultSet2.getString("capacity"));
                    firstRow = false;
                }
                // Add each "id" to the vector
                vector.add(resultSet2.getString("id"));
            }
            // Set the vector as the model for hallLoadCombobox
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(vector);
            courseHallCombobox.setModel(model);
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadCourseHall() {
        try {

            ResultSet resultSet = DB.search("SELECT `id` FROM `class_room`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("id"));
            }

            DefaultComboBoxModel ComboBoxModel2 = new DefaultComboBoxModel(vector);

            courseHallCombobox.setModel(ComboBoxModel2);

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    private void scheduleClasses() {
        String id = String.valueOf(classIDCombobox.getSelectedItem());
        String hall = String.valueOf(hallLoadCombobox.getSelectedItem());
        String hType = String.valueOf(hallTypeComboBox2.getSelectedItem());
        String scheduleStatus = String.valueOf(scheduleStatusCombobox.getSelectedItem());
        String capacity = capacityField.getText();

        String curruntDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date classdate1 = jDateChooser1.getDate();

        classIDCombobox.grabFocus();

        if (id.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Class ID is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (hType.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Hall Load Type is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (hall.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Hall Load is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (scheduleStatus.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Schedule Status is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (capacity.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Capacity is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (!capacity.matches("\\d+")) {  // Ensure capacity is a positive integer
            JOptionPane.showMessageDialog(this, "Capacity must be a positive integer.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (classdate1 == null) {
            JOptionPane.showMessageDialog(this, "Class Date is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (classdate1.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "The date is expired. Please Select a Valid Date", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Retrieve start and end times from fields
            String stTime = startTimeField.getText();
            String enTime = endTimeField.getText();

            // Validate start and end times
            if (stTime == null || stTime.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Start Time is required.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (enTime == null || enTime.isEmpty()) {
                JOptionPane.showMessageDialog(this, "End Time is required.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Parse the start and end times in 12-hour format
            Date day1 = format12hr.parse(stTime);
            Date day2 = format12hr.parse(enTime);

            // Convert to 24-hour format for easier validation
            String time24hr1 = format24hr.format(day1);
            String time24hr2 = format24hr.format(day2);

            // Validate that Start Time is before End Time
            if (day1.after(day2)) {
                JOptionPane.showMessageDialog(this, "Start Time must be before End Time.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            ResultSet resultSet = DB.search("SELECT * FROM `class_schedule` "
                    + "WHERE `class_id` = '" + id + "'"
                    + "AND `class_room_id` = '" + hall + "'"
                    + "AND `class_date` ='" + sdf.format(classdate1) + "'"
                    + "AND `start_time` = '" + time24hr1 + "'"
                    + "AND `end_time` = '" + time24hr2 + "'");

            if (resultSet.next()) {
                JOptionPane.showMessageDialog(this, "Already Scheduled.", "Warning", JOptionPane.WARNING_MESSAGE);
                reset();
            } else {

                DB.IUD("INSERT INTO `class_schedule` (`class_id`, `class_room_id`, `class_date`, `shedule_time`, `employee_id`, `schedule_status_id`, `start_time`, `end_time`)"
                        + "VALUES ('" + id + "', '" + hall + "', '" + sdf.format(classdate1) + "', '" + curruntDate + "', '" + admin.getUserID() + "', '"
                        + scheduleStautusMap.get(scheduleStatus) + "', '" + time24hr1 + "', '" + time24hr2 + "')");

                JOptionPane.showMessageDialog(this, "Schedule created successfully.", "Information", JOptionPane.INFORMATION_MESSAGE);

                classQueryMethod();
                loadTableAuto();
                reset();
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException | ParseException e) {
            e.printStackTrace();
        }
    }

    private void scheduleCourses() {
        String id = String.valueOf(courseIdCombobox.getSelectedItem());
        String hall = String.valueOf(courseHallCombobox.getSelectedItem());
        String hType = String.valueOf(courseHallTypeCombobox.getSelectedItem());
        String scheduleStatus = String.valueOf(courseScheduleStatusCombobox.getSelectedItem());
        String capacity = courseHallCapacityField.getText();

        String curruntDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date courseDate = jDateChooser2.getDate();

        courseIdCombobox.grabFocus();

        if (id.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Course ID is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (hType.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Hall Load Type is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (hall.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Hall Load is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (scheduleStatus.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Schedule Status is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (capacity.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Capacity is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (!capacity.matches("\\d+")) {  // Ensure capacity is a positive integer
            JOptionPane.showMessageDialog(this, "Capacity must be a positive integer.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (courseDate == null) {
            JOptionPane.showMessageDialog(this, "Course Date is required.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (courseDate.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "The date is expired. Please Select a Valid Date", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Retrieve start and end times from fields
            String stTime = courseStartTimeField.getText();
            String enTime = courseEndTimeField.getText();

            // Validate start and end times
            if (stTime == null || stTime.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Start Time is required.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (enTime == null || enTime.isEmpty()) {
                JOptionPane.showMessageDialog(this, "End Time is required.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Parse the start and end times in 12-hour format
            Date day1 = format12hr.parse(stTime);
            Date day2 = format12hr.parse(enTime);

            // Convert to 24-hour format for easier validation
            String time24hr1 = format24hr.format(day1);
            String time24hr2 = format24hr.format(day2);

            // Validate that Start Time is before End Time
            if (day1.after(day2)) {
                JOptionPane.showMessageDialog(this, "Start Time must be before End Time.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            ResultSet resultSet = DB.search("SELECT * FROM `course_schedule` "
                    + "WHERE `course_id` = '" + id + "'"
                    + "AND `class_room_id` = '" + hall + "'"
                    + "AND `class_date` ='" + sdf.format(courseDate) + "'"
                    + "AND `start_time` = '" + time24hr1 + "'"
                    + "AND `end_time` = '" + time24hr2 + "'");

            if (resultSet.next()) {
                JOptionPane.showMessageDialog(this, "Already Scheduled.", "Warning", JOptionPane.WARNING_MESSAGE);
                reset();
            } else {

                DB.IUD("INSERT INTO `course_schedule` (`class_date`, `shedule_time`, `employee_id`, `class_room_id`, `course_id`, `schedule_status_id`, `start_time`, `end_time`)"
                        + "VALUES ('" + sdf.format(courseDate) + "', '" + curruntDate + "', '" + admin.getUserID() + "', '" + hall + "', '" + id + "', '"
                        + scheduleStautusMap.get(scheduleStatus) + "', '" + time24hr1 + "', '" + time24hr2 + "')");

                JOptionPane.showMessageDialog(this, "Schedule created successfully.", "Information", JOptionPane.INFORMATION_MESSAGE);

                courseQueryMethod();
                loadTableAutoCourse();
                resetCourseAutoLoadTable();
                resetCourse();
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException | ParseException e) {
            e.printStackTrace();
        }
    }

    private void resetCourse() {

        courseIdCombobox.setSelectedIndex(0);
        courseHallCombobox.setSelectedIndex(0);
        courseHallTypeCombobox.setSelectedIndex(0);
        courseScheduleStatusCombobox.setSelectedIndex(0);
        courseHallCapacityField.setText("");
        courseStartTimeField.setText("");
        courseEndTimeField.setText("");
        courseStudents.setText("Null");
        jDateChooser2.setDate(null);

        courseQueryMethod();
        loadCourseHall();
        resetCourseAutoLoadTable();
    }

    private void resetCourseAutoLoadTable() {
        searchCourseHallTypeCombobox.setSelectedIndex(0);
        searchCourseIdCombobox.setSelectedIndex(0);
        searchCourseSubjectField.setText("");
        searchCourseGradeField.setText("");
        searchCourseTeacherField.setText("");

        loadTableAutoCourse();
    }
    //course schedule area-------------------------------------------------------------------------------------------------------

    // Class reporting-----------------------------------------------------------------------------------------------------------
    private void classQueryMethod() {
        loadClassSchedulTable("SELECT * FROM `class_schedule`"
                + "INNER JOIN `class` ON `class`.`id`=`class_schedule`.`class_id`"
                + "INNER JOIN `class_room` ON `class_room`.`id`=`class_schedule`.`class_room_id`"
                + "INNER JOIN `employee` ON `employee`.`id`=`class_schedule`.`employee_id`"
                + "INNER JOIN `schedule_status` ON `schedule_status`.`id`=`class_schedule`.`schedule_status_id`"
                + "INNER JOIN `room_type` ON `room_type`.`id`=`class_room`.`room_type_id` ORDER BY `class_schedule`.`id` ASC");
    }

    // method to generate the SQL query based on search(course)
    private String ClassScheduleReportQuery(String condition) {
        return "SELECT * FROM `class_schedule`"
                + "INNER JOIN `class` ON `class`.`id`=`class_schedule`.`class_id`"
                + "INNER JOIN `class_room` ON `class_room`.`id`=`class_schedule`.`class_room_id`"
                + "INNER JOIN `employee` ON `employee`.`id`=`class_schedule`.`employee_id`"
                + "INNER JOIN `schedule_status` ON `schedule_status`.`id`=`class_schedule`.`schedule_status_id`"
                + "INNER JOIN `room_type` ON `room_type`.`id`=`class_room`.`room_type_id` "
                + "WHERE"
                + condition
                + "ORDER BY `class_schedule`.`id` ASC";
    }

    private void searchClassSchedule() {
        // Retrieve inputs from the search fields
        Date searchDate = jDateChooser3.getDate(); // Search Date field for class
        String searchStatus = classReportScheduleStatusCombobox.getSelectedItem().toString(); // Search Status dropdown for class
        String hallType = classReportHallTypeCombobox.getSelectedItem().toString(); // Hall Type dropdown for class
        String classId = classReportIDField.getText().trim(); // Class ID field for class

        // Start building the SQL query condition
        StringBuilder condition = new StringBuilder(" 1=1 "); // Default condition to allow appending filters

        // Apply filters
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        if (searchDate != null) {
            String formattedDate = dateFormat.format(searchDate);
            condition.append(" AND `class_schedule`.`class_date` = '").append(formattedDate).append("' ");
        }
        if (!searchStatus.equals("Select")) {
            condition.append(" AND `schedule_status`.`statats` = '").append(searchStatus).append("' ");
        }
        if (!hallType.equals("Select")) {
            condition.append(" AND `room_type`.`type` = '").append(hallType).append("' ");
        }
        if (!classId.isEmpty()) {
            condition.append(" AND `class_schedule`.`class_id` LIKE '%").append(classId).append("%' ");
        }

        // Generate the final query
        String query = ClassScheduleReportQuery(condition.toString());

        // Load the table with the filtered data
        loadClassSchedulTable(query);
    }

    //reset class report
    private void classReportingReset() {
        classReportHallTypeCombobox.setSelectedIndex(0);
        classReportIDField.setText("");
        classReportScheduleStatusCombobox.setSelectedIndex(0);
        jDateChooser3.setDate(null);
        classQueryMethod();
    }
    // Class reporting-----------------------------------------------------------------------------------------------------------

    // course reporting------------------------------------------------------------------------------------------------------------
    private void courseQueryMethod() {
        loadCourseSchedulTable("SELECT * FROM `course_schedule`"
                + "INNER JOIN `course` ON `course`.`id`=`course_schedule`.`course_id`"
                + "INNER JOIN `class_room` ON `class_room`.`id`=`course_schedule`.`class_room_id`"
                + "INNER JOIN `employee` ON `employee`.`id`=`course_schedule`.`employee_id`"
                + "INNER JOIN `schedule_status` ON `schedule_status`.`id`=`course_schedule`.`schedule_status_id`"
                + "INNER JOIN `room_type` ON `room_type`.`id`=`class_room`.`room_type_id` ORDER BY `course_schedule`.`id` ASC");
    }

    // method to generate the SQL query based on search(course)
    private String CourseScheduleReportQuery(String condition) {
        return "SELECT * FROM `course_schedule`"
                + "INNER JOIN `course` ON `course`.`id`=`course_schedule`.`course_id`"
                + "INNER JOIN `class_room` ON `class_room`.`id`=`course_schedule`.`class_room_id`"
                + "INNER JOIN `employee` ON `employee`.`id`=`course_schedule`.`employee_id`"
                + "INNER JOIN `schedule_status` ON `schedule_status`.`id`=`course_schedule`.`schedule_status_id`"
                + "INNER JOIN `room_type` ON `room_type`.`id`=`class_room`.`room_type_id` "
                + "WHERE"
                + condition
                + "ORDER BY `course_schedule`.`id` ASC";
    }

    private void searchCourseSchedule() {
        // Retrieve inputs from the search fields
        Date searchDate = jDateChooser4.getDate(); // Search Date field
        String searchStatus = courseReportScheduleStatusCombobox.getSelectedItem().toString(); // Search Status dropdown
        String hallType = courseReportHallTypeCombobox.getSelectedItem().toString(); // Hall Type dropdown
        String courseId = courseReportIDField.getText().trim(); // Course ID field

        // Start building the SQL query condition
        StringBuilder condition = new StringBuilder(" 1=1 "); // Default condition to allow appending filters

        // Apply filters
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        if (searchDate != null) {
            String formattedDate = dateFormat.format(searchDate);
            condition.append(" AND `course_schedule`.`class_date` = '").append(formattedDate).append("' ");
        }
        if (!searchStatus.equals("Select")) {
            condition.append(" AND `schedule_status`.`statats` = '").append(searchStatus).append("' ");
        }
        if (!hallType.equals("Select")) {
            condition.append(" AND `room_type`.`type` = '").append(hallType).append("' ");
        }
        if (!courseId.isEmpty()) {
            condition.append(" AND `course_schedule`.`course_id` LIKE '%").append(courseId).append("%' ");
        }

        // Generate the final query
        String query = CourseScheduleReportQuery(condition.toString());

        // Load the table with the filtered data
        loadCourseSchedulTable(query);
    }

    //reset course report
    private void courseReportingReset() {
        courseReportHallTypeCombobox.setSelectedIndex(0);
        courseReportIDField.setText("");
        courseReportScheduleStatusCombobox.setSelectedIndex(0);
        jDateChooser4.setDate(null);
        courseQueryMethod();
    }

    // course reporting------------------------------------------------------------------------------------------------------------
}
