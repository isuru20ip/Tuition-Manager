/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.panal;

import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modal.DB;

/**
 *
 * @author dell
 */
public class UpdateClasses extends javax.swing.JFrame {

    /**
     * Creates new form UpdateClasses
     */
    public UpdateClasses() {
        initComponents();
        loadClassSchedulTable();
        loadClassId();
        loadHallType();
        loadHall();
        loadScheduleStatus();
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        classScheduleUpdateTable.setDefaultRenderer(Object.class, renderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        hallUpdateCombobox = new javax.swing.JComboBox<>();
        hallTypeUpdateCombobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLable2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        scheduleStatusUpdateCombobox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLable3 = new javax.swing.JLabel();
        capacityField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        classIDComboboxUpdate = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        classScheduleUpdateTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(234, 238, 244));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(234, 238, 244));

        hallUpdateCombobox.setBackground(new java.awt.Color(240, 240, 240));
        hallUpdateCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        hallUpdateCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        hallUpdateCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hallUpdateComboboxItemStateChanged(evt);
            }
        });

        hallTypeUpdateCombobox.setBackground(new java.awt.Color(240, 240, 240));
        hallTypeUpdateCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        hallTypeUpdateCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        hallTypeUpdateCombobox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hallTypeUpdateComboboxKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hall");

        jLable2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLable2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLable2.setText("Hall Type");

        jLabel3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Schedule Status");

        scheduleStatusUpdateCombobox.setBackground(new java.awt.Color(240, 240, 240));
        scheduleStatusUpdateCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        scheduleStatusUpdateCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jButton1.setText("Save Changes");

        jLable3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLable3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLable3.setText("Capacity");

        capacityField.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(hallUpdateCombobox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hallTypeUpdateCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLable2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLable3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(capacityField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(122, 122, 122)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scheduleStatusUpdateCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLable2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hallUpdateCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hallTypeUpdateCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scheduleStatusUpdateCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLable3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(capacityField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        jPanel2.setBackground(new java.awt.Color(234, 238, 244));

        classIDComboboxUpdate.setBackground(new java.awt.Color(240, 240, 240));
        classIDComboboxUpdate.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classIDComboboxUpdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel4.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Search By Class ID");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classIDComboboxUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(classIDComboboxUpdate))
                .addContainerGap())
        );

        classScheduleUpdateTable.setBackground(new java.awt.Color(240, 240, 240));
        classScheduleUpdateTable.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classScheduleUpdateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Schedule ID", "Class ID", "Class Date", "Employee", "Schedule Status", "Hall No", "Hall Type", "Hall Capacity", "Start Time", "End Time", "Scheduled Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        classScheduleUpdateTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classScheduleUpdateTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(classScheduleUpdateTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1016, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void classScheduleUpdateTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classScheduleUpdateTableMouseClicked
                try {
                        if (evt.getClickCount() == 2) { // Detect double-click
                                int selectedRow = classScheduleUpdateTable.getSelectedRow();
                
                                if (selectedRow != -1) {
                                        // Get values from the table and set in respective fields
                                        hallUpdateCombobox.setSelectedItem(String.valueOf(classScheduleUpdateTable.getValueAt(selectedRow, 5)));
                                        hallTypeUpdateCombobox.setSelectedItem(String.valueOf(classScheduleUpdateTable.getValueAt(selectedRow, 6)));
                                        scheduleStatusUpdateCombobox.setSelectedItem(String.valueOf(classScheduleUpdateTable.getValueAt(selectedRow, 4)));                              
                                   }
                
                                // Reload table if necessary
                                loadClassSchedulTable();
                            }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

    }//GEN-LAST:event_classScheduleUpdateTableMouseClicked

    private void hallTypeUpdateComboboxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hallTypeUpdateComboboxKeyReleased
      loadroomdata();
    }//GEN-LAST:event_hallTypeUpdateComboboxKeyReleased

    private void hallUpdateComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hallUpdateComboboxItemStateChanged
       changeCapacity();
    }//GEN-LAST:event_hallUpdateComboboxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField capacityField;
    private javax.swing.JComboBox<String> classIDComboboxUpdate;
    private javax.swing.JTable classScheduleUpdateTable;
    private javax.swing.JComboBox<String> hallTypeUpdateCombobox;
    private javax.swing.JComboBox<String> hallUpdateCombobox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLable2;
    private javax.swing.JLabel jLable3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> scheduleStatusUpdateCombobox;
    // End of variables declaration//GEN-END:variables

    private void loadClassSchedulTable() {
        try {

            ResultSet resultSet = DB.search("SELECT * FROM `class_schedule`"
                    + "INNER JOIN `class` ON `class`.`id`=`class_schedule`.`class_id`"
                    + "INNER JOIN `class_room` ON `class_room`.`id`=`class_schedule`.`class_room_id`"
                    + "INNER JOIN `employee` ON `employee`.`id`=`class_schedule`.`employee_id`"
                    + "INNER JOIN `schedule_status` ON `schedule_status`.`id`=`class_schedule`.`schedule_status_id`"
                    + "INNER JOIN `room_type` ON `room_type`.`id`=`class_room`.`room_type_id`");

            DefaultTableModel tableModel = (DefaultTableModel) classScheduleUpdateTable.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("class_schedule.id"));
                vector.add(resultSet.getString("class.id"));
                vector.add(resultSet.getString("class_date"));
                vector.add(resultSet.getString("employee.fname") + " " + resultSet.getString("employee.lname"));
                vector.add(resultSet.getString("schedule_status.statats"));
                vector.add(resultSet.getString("class_room.id"));
                vector.add(resultSet.getString("room_type.type"));
                vector.add(resultSet.getString("class_room.capacity"));
                vector.add(resultSet.getString("start_time"));
                vector.add(resultSet.getString("end_time"));
                vector.add(resultSet.getString("shedule_time"));

                tableModel.addRow(vector);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void loadClassId() {
        try {

            ResultSet resultSet = DB.search("SELECT * FROM `class`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("id"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);

            classIDComboboxUpdate.setModel(ComboBoxModel);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    private void loadHall() {
        try {

            ResultSet resultSet = DB.search("SELECT * FROM `class_room`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("id"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);

            hallUpdateCombobox.setModel(ComboBoxModel);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void loadHallType() {
        try {

            ResultSet resultSet = DB.search("SELECT * FROM `room_type`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("type"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);
            
            hallTypeUpdateCombobox.setModel(ComboBoxModel);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void loadScheduleStatus() {

        try {

            ResultSet resultSet = DB.search("SELECT `statats` FROM `schedule_status`");

            Vector vector = new Vector();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("statats"));
            }

            DefaultComboBoxModel ComboBoxModel = new DefaultComboBoxModel(vector);

            scheduleStatusUpdateCombobox.setModel(ComboBoxModel);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    //change hall data from double tap with table1
    private void loadroomdata() {
        String selectedType = String.valueOf(hallTypeUpdateCombobox.getSelectedItem());

        try {

            ResultSet resultSet = DB.search("SELECT * FROM `class_room` INNER JOIN `room_type` ON `room_type`.`id` = `class_room`.`room_type_id` WHERE `type` = '" + selectedType + "'");
            Vector<String> vector = new Vector<>();

           // Iterate through the result set
            boolean firstRow = true;
            while (resultSet.next()) {
                if (firstRow) {
                    // Set capacityField text from the first row only
                    capacityField.setText(resultSet.getString("capacity"));
                    firstRow = false;
                }
                // Add each "id" to the vector
                vector.add(resultSet.getString("id"));
            }

            // Set the vector as the model for hallLoadCombobox
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(vector);
            hallUpdateCombobox.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void changeCapacity() {
        String selectedHall = String.valueOf(hallUpdateCombobox.getSelectedItem());

        try {
            ResultSet resultSet = DB.search("SELECT `capacity` FROM `class_room` WHERE `id` = '" + selectedHall + "'");
            Vector<String> vector = new Vector<>();

            boolean firstRow = true;
            while (resultSet.next()) {
                if (firstRow) {
                    // Set capacityField text from the first row only
                    capacityField.setText(resultSet.getString("capacity"));
                    firstRow = false;
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
