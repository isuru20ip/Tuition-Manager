/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI.popup;

import java.awt.HeadlessException;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modal.DB;
import modal.LogCenter;

/**
 *
 * @author dell
 */
public class UpdateEnrollments extends javax.swing.JDialog {

    /**
     * Creates new form UpdateEnrollments
     */
    public UpdateEnrollments(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadPaymentModel();
        loadStatus();
        loadClassesEnrollment("SELECT * FROM `class_enrollment`"
                + "INNER JOIN `class` ON `class`.`id` = `class_enrollment`.`class_id`"
                + "INNER JOIN `student` ON `student`.`id` = `class_enrollment`.`student_id`"
                + "INNER JOIN `enrollment_status` ON `enrollment_status`.`id` = `class_enrollment`.`enrollment_status_id`"
                + "INNER JOIN `employee` ON `employee`.`id` = `class_enrollment`.`employee_id`"
                + "INNER JOIN `payment_modal` ON `payment_modal`.`id` = `class_enrollment`.`payment_modal_id` ORDER BY `class_enrollment`.`id` ASC");
        loadCoursesEnrollment("SELECT * FROM `course_enrollment`"
                + "INNER JOIN `course` ON `course`.`id` = `course_enrollment`.`course_id`"
                + "INNER JOIN `student` ON `student`.`id` = `course_enrollment`.`student_id`"
                + "INNER JOIN `enrollment_status` ON `enrollment_status`.`id` = `course_enrollment`.`enrollment_status_id`"
                + "INNER JOIN `employee` ON `employee`.`id` = `course_enrollment`.`employee_id`"
                + "INNER JOIN `payment_modal` ON `payment_modal`.`id` = `course_enrollment`.`payment_modal_id` ORDER BY `course_enrollment`.`id` ASC");

        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        updateTable1.setDefaultRenderer(Object.class, renderer);
        updateTable2.setDefaultRenderer(Object.class, renderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        studentTextField = new javax.swing.JTextField();
        classCourseIdTextField = new javax.swing.JTextField();
        statusCombobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        paymentModalCombobox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        updateTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        updateTable2 = new javax.swing.JTable();
        saveChangesButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        searchStudentIDField1 = new javax.swing.JTextField();
        searchcClassIDField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        searchStudendIDField2 = new javax.swing.JTextField();
        searchCourseIDField = new javax.swing.JTextField();
        classFindButton = new javax.swing.JButton();
        courseUpdateFindButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jPanel2.setBackground(new java.awt.Color(234, 238, 244));

        studentTextField.setEditable(false);
        studentTextField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        studentTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        classCourseIdTextField.setEditable(false);
        classCourseIdTextField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        classCourseIdTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        statusCombobox.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        statusCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Student");

        jLabel3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Class / Course ");

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Payment Modal");

        jLabel4.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Status");

        paymentModalCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(studentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(classCourseIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(paymentModalCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(statusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(studentTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(classCourseIdTextField)
                    .addComponent(statusCombobox)
                    .addComponent(paymentModalCombobox))
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        updateTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class Enrollment ID", "Class ID", "Student ID ", "Enrollment Status", "Register Date", "Employee", "Payment Model"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        updateTable1.getTableHeader().setReorderingAllowed(false);
        updateTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(updateTable1);

        updateTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Enrollment ID", "Course ID", "Student ID ", "Enrollment Status", "Register Date", "Employee", "Payment Model"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        updateTable2.getTableHeader().setReorderingAllowed(false);
        updateTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(updateTable2);

        saveChangesButton.setBackground(new java.awt.Color(204, 255, 204));
        saveChangesButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        saveChangesButton.setText("Save Changes");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Course Enrollment");

        jLabel10.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Class Enrollment");

        jButton2.setBackground(new java.awt.Color(255, 204, 204));
        jButton2.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Search By Student ID");

        jLabel6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Search By Class ID");

        searchStudentIDField1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchStudentIDField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        searchcClassIDField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchcClassIDField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Search By Student ID");

        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Search By Course ID");

        searchStudendIDField2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchStudendIDField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        searchCourseIDField.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        searchCourseIDField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        classFindButton.setBackground(new java.awt.Color(204, 255, 204));
        classFindButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        classFindButton.setText("Find");
        classFindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classFindButtonActionPerformed(evt);
            }
        });

        courseUpdateFindButton.setBackground(new java.awt.Color(204, 255, 204));
        courseUpdateFindButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        courseUpdateFindButton.setText("Find");
        courseUpdateFindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseUpdateFindButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchStudentIDField1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchcClassIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchStudendIDField2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchCourseIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(courseUpdateFindButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classFindButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchStudentIDField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchcClassIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classFindButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchStudendIDField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCourseIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseUpdateFindButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(saveChangesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateTable1MouseClicked
        try {

            int selectedRow = updateTable1.getSelectedRow();

            if (evt.getClickCount() == 2) {

                if (selectedRow != -1) {

                    studentTextField.setText(String.valueOf(updateTable1.getValueAt(selectedRow, 2)));
                    classCourseIdTextField.setText(String.valueOf(updateTable1.getValueAt(selectedRow, 1)));
                    paymentModalCombobox.setSelectedItem(updateTable1.getValueAt(selectedRow, 6));
                    statusCombobox.setSelectedItem(updateTable1.getValueAt(selectedRow, 3));

                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateTable1MouseClicked

    private void updateTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateTable2MouseClicked
        try {

            int selectedRow = updateTable2.getSelectedRow();

            if (evt.getClickCount() == 2) {

                if (selectedRow != -1) {

                    studentTextField.setText(String.valueOf(updateTable2.getValueAt(selectedRow, 2)));
                    classCourseIdTextField.setText(String.valueOf(updateTable2.getValueAt(selectedRow, 1)));
                    paymentModalCombobox.setSelectedItem(updateTable2.getValueAt(selectedRow, 6));
                    statusCombobox.setSelectedItem(updateTable2.getValueAt(selectedRow, 3));

                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateTable2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        reset();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed

        updateEnrollment();
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    private void classFindButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classFindButtonActionPerformed
        searchClassUpdateEnroll();
    }//GEN-LAST:event_classFindButtonActionPerformed

    private void courseUpdateFindButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseUpdateFindButtonActionPerformed
        searchUpdateCourseEnroll();
    }//GEN-LAST:event_courseUpdateFindButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateEnrollments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateEnrollments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateEnrollments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateEnrollments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UpdateEnrollments dialog = new UpdateEnrollments(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField classCourseIdTextField;
    private javax.swing.JButton classFindButton;
    private javax.swing.JButton courseUpdateFindButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> paymentModalCombobox;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JTextField searchCourseIDField;
    private javax.swing.JTextField searchStudendIDField2;
    private javax.swing.JTextField searchStudentIDField1;
    private javax.swing.JTextField searchcClassIDField;
    private javax.swing.JComboBox<String> statusCombobox;
    private javax.swing.JTextField studentTextField;
    private javax.swing.JTable updateTable1;
    private javax.swing.JTable updateTable2;
    // End of variables declaration//GEN-END:variables

    private static HashMap<String, String> paymentModelMap = new HashMap<>(); //for get id from payment model
    private static HashMap<String, String> enrollmentStatusMap = new HashMap<>(); //for get id from status

    private void loadClassesEnrollment(String query) {
        try {

            ResultSet resultSet = DB.search(query);

            DefaultTableModel tableModel = (DefaultTableModel) updateTable1.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("id"));
                vector.add(resultSet.getString("class.id"));
                vector.add(resultSet.getString("student.id"));
                vector.add(resultSet.getString("enrollment_status.name"));
                vector.add(resultSet.getString("register_date"));
                vector.add(resultSet.getString("employee.fname") + " " + resultSet.getString("employee.lname"));
                vector.add(resultSet.getString("payment_modal.modal"));

                tableModel.addRow(vector);
            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } catch (IOException ex) {
                LogCenter.logger.log(java.util.logging.Level.WARNING, "Database Connecting Problem", ex);
        }

    }

    private void loadCoursesEnrollment(String query) {
        try {

            ResultSet resultSet = DB.search(query);

            DefaultTableModel tableModel = (DefaultTableModel) updateTable2.getModel();
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getString("id"));
                vector.add(resultSet.getString("course.id"));
                vector.add(resultSet.getString("student.id"));
                vector.add(resultSet.getString("enrollment_status.name"));
                vector.add(resultSet.getString("register_date"));
                vector.add(resultSet.getString("employee.fname") + " " + resultSet.getString("employee.lname"));
                vector.add(resultSet.getString("payment_modal.modal"));

                tableModel.addRow(vector);
            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } catch (IOException ex) {
                LogCenter.logger.log(java.util.logging.Level.WARNING, "Database Connecting Problem", ex);
        }
    }

    private void loadPaymentModel() {
        try {

            ResultSet resultSet = DB.search("SELECT * FROM `payment_modal`");

            Vector<String> vector = new Vector<>();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("modal"));
                paymentModelMap.put(resultSet.getString("modal"), resultSet.getString("id"));

            }

            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(vector);
            paymentModalCombobox.setModel(comboBoxModel);

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } catch (IOException ex) {
                LogCenter.logger.log(java.util.logging.Level.WARNING, "Database Connecting Problem", ex);
        }
    }

    private void loadStatus() {
        try {

            ResultSet resultSet = DB.search("SELECT * FROM `enrollment_status`");

            Vector<String> vector = new Vector<>();

            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("name"));
                enrollmentStatusMap.put(resultSet.getString("name"), resultSet.getString("id"));

            }

            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(vector);
            statusCombobox.setModel(comboBoxModel);

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } catch (IOException ex) {
                LogCenter.logger.log(java.util.logging.Level.WARNING, "Database Connecting Problem", ex);
        }
    }

    //class Update Enrollment Search part-------------------------------------------------------------------------------
    // Method to search class enrollment by Student ID or Class ID
    private void searchClassUpdateEnroll() {
        // Retrieve user input from the search fields
        String studentID = searchStudentIDField1.getText().trim(); // Search by Student ID
        String classID = searchcClassIDField.getText().trim();      // Search by Class ID

        try {
            // Ensure that at least one of the fields is provided
            if (!studentID.isEmpty() || !classID.isEmpty()) {
                // Build the SQL query dynamically based on the provided input
                StringBuilder query = new StringBuilder(
                        "SELECT * FROM `class_enrollment`"
                        + " INNER JOIN `class` ON `class`.`id` = `class_enrollment`.`class_id`"
                        + " INNER JOIN `student` ON `student`.`id` = `class_enrollment`.`student_id`"
                        + " INNER JOIN `enrollment_status` ON `enrollment_status`.`id` = `class_enrollment`.`enrollment_status_id`"
                        + " INNER JOIN `employee` ON `employee`.`id` = `class_enrollment`.`employee_id`"
                        + " INNER JOIN `payment_modal` ON `payment_modal`.`id` = `class_enrollment`.`payment_modal_id`"
                        + " WHERE 1=1 "); // Default condition to allow appending filters

                // Add filters based on input
                if (!studentID.isEmpty()) {
                    query.append(" AND `student`.`id` LIKE '%").append(studentID).append("%'");
                }
                if (!classID.isEmpty()) {
                    query.append(" AND `class`.`id` LIKE '%").append(classID).append("%'");
                }

                query.append(" ORDER BY `class_enrollment`.`id` ASC");

                // Pass the query to the method that loads the enrollment data
                loadClassesEnrollment(query.toString());
            } else {
                // Show an error message if both fields are empty
                JOptionPane.showMessageDialog(this, "Please enter a Student ID or Class ID to search.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (HeadlessException ex) {
            // Log and show the exception for debugging purposes
            ex.printStackTrace();
        }
    }

    //class Update Enrollment Search part-------------------------------------------------------------------------------
    
    
    //course Update Enrollment Search part-------------------------------------------------------------------------------
    private void searchUpdateCourseEnroll() {
        // Retrieve user input from the search fields
        String studentID = searchStudendIDField2.getText().trim(); // Search by Student ID
        String courseID = searchCourseIDField.getText().trim();   // Search by Course ID

        try {
            // Ensure at least one input is provided
            if (!studentID.isEmpty() || !courseID.isEmpty()) {
                // Build the base query
                StringBuilder query = new StringBuilder(
                        "SELECT * FROM `course_enrollment`"
                        + " INNER JOIN `course` ON `course`.`id` = `course_enrollment`.`course_id`"
                        + " INNER JOIN `student` ON `student`.`id` = `course_enrollment`.`student_id`"
                        + " INNER JOIN `enrollment_status` ON `enrollment_status`.`id` = `course_enrollment`.`enrollment_status_id`"
                        + " INNER JOIN `employee` ON `employee`.`id` = `course_enrollment`.`employee_id`"
                        + " INNER JOIN `payment_modal` ON `payment_modal`.`id` = `course_enrollment`.`payment_modal_id`"
                        + " WHERE 1=1 "); // Base condition to append filters dynamically

                // Add conditions based on user input
                if (!studentID.isEmpty()) {
                    query.append(" AND `student`.`id` LIKE '%").append(studentID).append("%'");
                }
                if (!courseID.isEmpty()) {
                    query.append(" AND `course`.`id` LIKE '%").append(courseID).append("%'");
                }

                // Append ordering clause
                query.append(" ORDER BY `course_enrollment`.`id` ASC");

                // Execute the query
                loadCoursesEnrollment(query.toString());
            } else {
                // Show an error message if both fields are empty
                JOptionPane.showMessageDialog(this, "Please enter a Student ID or Course ID to search.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (HeadlessException ex) {
            ex.printStackTrace();
        }
    }

    //course Update Enrollment Search part-------------------------------------------------------------------------------
    private void updateEnrollment() {
        try {
            String student = studentTextField.getText();
            String ClassCourse = classCourseIdTextField.getText();
            String pmoodel = String.valueOf(paymentModalCombobox.getSelectedItem());
            String status = String.valueOf(statusCombobox.getSelectedItem());

            if (student.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Select A row From Tables.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (ClassCourse.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Select A row From Tables.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (pmoodel.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Select Payment Modal.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (status.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Select Enrolment Status.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                // update class enrollment
                if (ClassCourse.matches("CL\\d{6}")) {

                    ResultSet resultSet = DB.search("SELECT * FROM `class_enrollment` WHERE `class_id` = '" + ClassCourse + "' AND `student_id` = '" + student + "' AND `enrollment_status_id` = '" + enrollmentStatusMap.get(status) + "' AND `payment_modal_id` = '" + paymentModelMap.get(pmoodel) + "'");

                    if (resultSet.next()) {
                        JOptionPane.showMessageDialog(this, "No Updates Available.", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        DB.IUD("UPDATE `class_enrollment`"
                                + "SET `payment_modal_id` = '" + paymentModelMap.get(pmoodel) + "', `enrollment_status_id` = '" + enrollmentStatusMap.get(status) + "'"
                                + "WHERE `student_id` = '" + student + "' AND `class_id` = '" + ClassCourse + "'");
                        JOptionPane.showMessageDialog(this, "Class Enrollment Update Successfull", "Information", JOptionPane.INFORMATION_MESSAGE);
                        reset();
                    }

                    //update course enrollment
                } else if (ClassCourse.matches("CO\\d{6}")) {
                    ResultSet resultSet = DB.search("SELECT * FROM `course_enrollment` WHERE `course_id` = '" + ClassCourse + "' AND `student_id` = '" + student + "' AND `enrollment_status_id` = '" + enrollmentStatusMap.get(status) + "' AND `payment_modal_id` = '" + paymentModelMap.get(pmoodel) + "'");

                    if (resultSet.next()) {
                        JOptionPane.showMessageDialog(this, "No Updates Available.", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        DB.IUD("UPDATE `course_enrollment`"
                                + "SET `payment_modal_id` = '" + paymentModelMap.get(pmoodel) + "', `enrollment_status_id` = '" + enrollmentStatusMap.get(status) + "'"
                                + "WHERE `student_id` = '" + student + "' AND `course_id` = '" + ClassCourse + "'");

                        JOptionPane.showMessageDialog(this, "Course Enrollment Update Successfull", "Information", JOptionPane.INFORMATION_MESSAGE);
                        reset();
                    }
                }

                this.dispose();

            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } catch (IOException ex) {
                LogCenter.logger.log(java.util.logging.Level.WARNING, "Database Connecting Problem", ex);
        }
    }

    private void reset() {
        searchCourseIDField.setText("");
        searchStudendIDField2.setText("");
        searchStudentIDField1.setText("");
        searchcClassIDField.setText("");
        studentTextField.setText("");
        classCourseIdTextField.setText("");
        paymentModalCombobox.setSelectedIndex(0);
        statusCombobox.setSelectedIndex(0);
        loadClassesEnrollment("SELECT * FROM `class_enrollment`"
                + "INNER JOIN `class` ON `class`.`id` = `class_enrollment`.`class_id`"
                + "INNER JOIN `student` ON `student`.`id` = `class_enrollment`.`student_id`"
                + "INNER JOIN `enrollment_status` ON `enrollment_status`.`id` = `class_enrollment`.`enrollment_status_id`"
                + "INNER JOIN `employee` ON `employee`.`id` = `class_enrollment`.`employee_id`"
                + "INNER JOIN `payment_modal` ON `payment_modal`.`id` = `class_enrollment`.`payment_modal_id` ORDER BY `class_enrollment`.`id` ASC");
        loadCoursesEnrollment("SELECT * FROM `course_enrollment`"
                + "INNER JOIN `course` ON `course`.`id` = `course_enrollment`.`course_id`"
                + "INNER JOIN `student` ON `student`.`id` = `course_enrollment`.`student_id`"
                + "INNER JOIN `enrollment_status` ON `enrollment_status`.`id` = `course_enrollment`.`enrollment_status_id`"
                + "INNER JOIN `employee` ON `employee`.`id` = `course_enrollment`.`employee_id`"
                + "INNER JOIN `payment_modal` ON `payment_modal`.`id` = `course_enrollment`.`payment_modal_id` ORDER BY `course_enrollment`.`id` ASC");
    }

}
